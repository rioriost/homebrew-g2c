{
    "g.V()": "MATCH (n) RETURN n",
    "g.E()": "MATCH ()-[r]-() RETURN r",
    "g.V().hasLabel('person')": "MATCH (n:person) RETURN n",
    "g.V().hasLabel('software')": "MATCH (n:software) RETURN n",
    "g.V().has('person', 'age', 30)": "MATCH (n:person {age:30}) RETURN n",
    "g.V().has('software', 'lang', 'java')": "MATCH (n:software {lang:'java'}) RETURN n",
    "g.V().out('knows')": "MATCH (n)-[:knows]->(m) RETURN m",
    "g.V().in('created')": "MATCH (n)<-[:created]-(m) RETURN m",
    "g.V().both('knows')": "MATCH (n)-[:knows]-(m) RETURN m",
    "g.V().repeat(out()).times(2)": "MATCH (n)-[*2]->(m) RETURN m",
    "g.V().repeat(in()).times(2)": "MATCH (n)<-[*2]-(m) RETURN m",
    "g.V().valueMap()": "MATCH (n) RETURN properties(n) AS props",
    "g.V().properties('name')": "MATCH (n) WHERE exists(n.name) RETURN n.name",
    "g.V().values('name')": "MATCH (n) RETURN n.name",
    "g.V().out().count()": "MATCH (n)-[]->(m) RETURN count(m)",
    "g.V().group().by('age')": "MATCH (n) WITH n.age AS key, collect(n) AS group RETURN collect({key:key, value:group})",
    "g.V().groupCount().by('name')": "MATCH (n) WHERE exists(n.name) WITH n.name AS key, count(*) AS cnt RETURN collect({key:key, value:cnt})",
    "g.V().simplePath()": "MATCH (n) RETURN n",
    "g.V().hasLabel('person').as('a').out('knows').as('b').select('a','b')": "MATCH (a:person)-[:knows]->(b) RETURN a,b",
    "g.V().order().by('name')": "MATCH (n) RETURN n ORDER BY n.name",
    "g.V().order().by('age', decr)": "MATCH (n) RETURN n ORDER BY n.age DESC",
    "g.V().limit(5)": "MATCH (n) RETURN n LIMIT 5",
    "g.V().has('name', within('Alice','Bob'))": "MATCH (n) WHERE n.name IN ['Alice','Bob'] RETURN n",
    "g.E().hasLabel('created')": "MATCH ()-[r:created]-() RETURN r",
    "g.V().has('name', 'Marko')": "MATCH (n {name:'Marko'}) RETURN n",
    "g.V().has('name', 'Marko').both('knows')": "MATCH (a {name:'Marko'})-[:knows]-(b) RETURN b",
    "g.V().has('name', 'Marko').both('created')": "MATCH (a {name:'Marko'})-[:created]-(b) RETURN b",
    "g.V().bothE()": "MATCH (n)-[r]-(m) RETURN r",
    "g.V().bothE().has('weight', gt(0.5))": "MATCH (n)-[r]-(m) WHERE r.weight > 0.5 RETURN r",
    "g.E().mean('weight')": "MATCH ()-[r]-() RETURN avg(r.weight)",
    "g.E().sum('weight')": "MATCH ()-[r]-() RETURN sum(r.weight)",
    "g.E().min('weight')": "MATCH ()-[r]-() RETURN min(r.weight)",
    "g.E().max('weight')": "MATCH ()-[r]-() RETURN max(r.weight)",
    "g.V().group().by(label).by(count())": "MATCH (n) WITH labels(n)[0] AS label, count(n) AS cnt RETURN collect({key:label, value:cnt})",
    "g.V().hasLabel('person').map(values('name'))": "MATCH (n:person) RETURN n.name",
    "g.V().hasLabel('person').flatMap(out('knows'))": "MATCH (n:person)-[:knows]->(m) RETURN m",
    "g.V().has('name', 'Alice').repeat(out()).emit()": "MATCH (a {name:'Alice'}), p=(a)-[*]->(m) RETURN distinct m",
    "g.V().has('name', 'Alice').repeat(out()).until(has('name', 'Bob'))": "MATCH (a {name:'Alice'}), p=(a)-[*]->(b {name:'Bob'}) RETURN b",
    "g.V().has('age', gt(30))": "MATCH (n) WHERE n.age > 30 RETURN n",
    "g.V().has('age', lte(25))": "MATCH (n) WHERE n.age <= 25 RETURN n",
    "g.V().has('name', startingWith('A'))": "MATCH (n) WHERE n.name STARTS WITH 'A' RETURN n",
    "g.V('1').out()": "MATCH (n {id:'1'})-[]->(m) RETURN m",
    "g.V('1').in()": "MATCH (n {id:'1'})<-[]-(m) RETURN m",
    "g.V('1').both()": "MATCH (n {id:'1'})-[*]-(m) RETURN m",
    "g.V('1').repeat(both()).times(3)": "MATCH (n {id:'1'}), p=(n)-[*3]-(m) RETURN m",
    "g.V().has('name', 'Alice').bothE().otherV()": "MATCH (a {name:'Alice'})-[r]-(m) RETURN m",
    "g.V().has('name', 'Alice').bothE().limit(3)": "MATCH (a {name:'Alice'})-[r]-(m) RETURN r LIMIT 3",
    "g.V().has('age', between(30))": "MATCH (n) WHERE n.age > 30 AND n.age < 30 RETURN n",
    "g.V().has('age', inside(30))": "MATCH (n) WHERE n.age > 30 AND n.age < 30 RETURN n",
    "g.V().has('age', outside(30))": "MATCH (n) WHERE n.age < 30 OR n.age > 30 RETURN n",
    "g.V().has('name', 'Alice').store('x')": "MATCH (n {name: 'Alice'}) WITH collect(n) AS x, n â€ƒRETURN n, x",
    "g.withSideEffect('x', []).V().has('name', 'Bob')": "MATCH (n {name:'Bob'}) RETURN n",
    "g.V().hasLabel('person').values('name').fold()": "MATCH (n:person) RETURN collect(n.name)",
    "g.V().hasLabel('person').local(out('knows').values('name'))": "MATCH (n:person) OPTIONAL MATCH (n)-[:knows]->(m) RETURN n, collect(m.name)",
    "g.V().has('name', 'Alice').where(out().hasLabel('person'))": "MATCH (n {name: 'Alice'}) WHERE (n)-[]->(:person) RETURN n",
    "g.V().has('name', 'Alice').where(inE('knows'))": "MATCH (n {name: 'Alice'}) WHERE (n)<-[:knows]-() RETURN n",
    "g.V().has('name', 'Alice').emit().repeat(out())": "MATCH (a {name:'Alice'}), p=(a)-[*]->(m) RETURN distinct m",
    "g.V().has('name', 'Alice').repeat(both()).until(has('name','Bob'))": "MATCH (a {name:'Alice'}), p=(a)-[*]->(b {name:'Bob'}) RETURN b",
    "g.V().has('name', 'Alice').store('a').both().store('a')": "MATCH (n {name: 'Alice'}) OPTIONAL MATCH (n)-[]-(m) RETURN collect(distinct n) + collect(distinct m) AS a",
    "g.V().has('name', 'Alice').group().by(label).by('name')": "MATCH (n {name:'Alice'}) WITH labels(n)[0] AS label, n.name AS name RETURN collect({key:label, value:name})",
    "g.V().has('name', 'Alice').select('name')": "MATCH (n {name:'Alice'}) RETURN n.name",
    "g.V().has('name', 'Alice').path()": "MATCH p=(n {name:'Alice'})-[*]->(m) RETURN p",
    "g.V().hasLabel('person').dedup()": "MATCH (n:person) WITH distinct n RETURN n",
    "g.V().hasLabel('person').dedup().by('name')": "MATCH (n:person) WITH distinct n.name AS name, head(collect(n)) AS node RETURN node",
    "g.V().hasLabel('person').aggregate('a')": "MATCH (n:person) WITH collect(n) AS a RETURN a",
    "g.V().hasLabel('person').groupCount().by('age')": "MATCH (n:person) WITH n.age AS key, count(n) AS cnt RETURN collect({key:key, value:cnt})",
    "g.V().hasLabel('software').out('created')": "MATCH (n:software)-[:created]->(m) RETURN m",
    "g.V().has('name', 'Alice').coalesce(out('knows'), out('created'))": "MATCH (a {name: 'Alice'}) MATCH (a)-[:knows]->(x) RETURN x UNION MATCH (a {name: 'Alice'}) WHERE NOT EXISTS { MATCH (a)-[:knows]->() } MATCH (a)-[:created]->(x) RETURN x",
    "g.V().hasLabel('person').coin(0.5).count()": "MATCH (n:person) WHERE rand() < 0.5 RETURN count(n)",
    "g.E().bothV().dedup()": "MATCH (n)-[r]-(m) WITH collect(n)+collect(m) AS nodes UNWIND nodes AS x RETURN distinct x",
    "g.V().has('name', 'Alice').repeat(out()).emit(has('name', 'Bob')).path()": "MATCH path = (a {name: 'Alice'})-[*]->(b {name: 'Bob'}) RETURN path",
    "g.V().has('name', 'Alice').repeat(out()).until(has('name','Bob')).path()": "MATCH p=(a {name:'Alice'})-[*]->(b {name:'Bob'}) RETURN p",
    "g.V().has('person', 'name', 'Alice').union(identity(), out('knows'))": "MATCH (n:person {name:'Alice'}) OPTIONAL MATCH (n)-[:knows]->(m) RETURN collect(n) + collect(m)",
    "g.V().has('person', 'name', 'Alice').union(out('knows'), out('created'))": "MATCH (n:person {name:'Alice'}) OPTIONAL MATCH (n)-[:knows]->(m) OPTIONAL MATCH (n)-[:created]->(m2) RETURN collect(m) + collect(m2)",
    "g.V().both().filter(has('age', gt(30)))": "MATCH (n)-[]-(m) WHERE m.age > 30 RETURN m",
    "g.V().has('name', 'Alice').sideEffect{println it}": "MATCH (n {name:'Alice'}) RETURN n",
    "g.V().sideEffect{it.get().value('age')}": "MATCH (n) RETURN n",
    "g.V().choose(has('age', gt(30)), out(), in())": "MATCH (n) WHERE n.age > 30 MATCH (n)-[]->(m) RETURN m UNION MATCH (n) WHERE NOT(n.age > 30) MATCH (n)<-[]-(m) RETURN m",
    "g.V().choose(constant(true), out(), in())": "MATCH (n) OPTIONAL MATCH (n)-[]->(m) RETURN m",
    "g.V().has('name', 'Alice').limit(1)": "MATCH (n {name:'Alice'}) RETURN n LIMIT 1",
    "g.V().repeat(out()).times(3).valueMap()": "MATCH (n)-[*3]->(m) RETURN DISTINCT properties(m) AS valueMap",
    "g.V().repeat(in()).times(3).valueMap()": "MATCH (a)<-[*3]-(m) RETURN DISTINCT properties(m) AS valueMap",
    "g.V().both('knows').dedup().count()": "MATCH (n)-[:knows]-(m) RETURN count(distinct m)",
    "g.V().has('name', 'Bob').bothE().filter(values('weight').is(gt(0.4)))": "MATCH (n {name:'Bob'})-[r]-(m) WHERE r.weight > 0.4 RETURN r",
    "g.E().filter(has('weight', lt(0.3)))": "MATCH ()-[r]-() WHERE r.weight < 0.3 RETURN r",
    "g.V().has('name', 'Alice').out('created').has('lang', 'java')": "MATCH (n {name:'Alice'})-[:created]->(m {lang:'java'}) RETURN m",
    "g.V().has('name', 'Bob').in('likes')": "MATCH (n {name:'Bob'})<-[:likes]-(m) RETURN m",
    "g.V().both('collaborates')": "MATCH (n)-[:collaborates]-(m) RETURN m",
    "g.V().outE('knows').inV().has('age', gt(25))": "MATCH (n)-[:knows]->(m) WHERE m.age > 25 RETURN m",
    "g.V().has('city', 'London')": "MATCH (n {city:'London'}) RETURN n",
    "g.V().has('city', 'New York')": "MATCH (n {city:'New York'}) RETURN n",
    "g.V().has('salary', gt(50000))": "MATCH (n) WHERE n.salary > 50000 RETURN n",
    "g.V().has('salary', between(80000))": "MATCH (n) WHERE n.salary > 80000 AND n.salary < 80000 RETURN n",
    "g.E().has('since', gte(2010))": "MATCH ()-[r]-() WHERE r.since >= 2010 RETURN r",
    "g.V().has('department', 'sales')": "MATCH (n {department:'sales'}) RETURN n",
    "g.V().out('manages').has('role', 'manager')": "MATCH (n)-[:manages]->(m {role:'manager'}) RETURN m",
    "g.V().in('reportsTo').has('role', 'employee')": "MATCH (n)<-[:reportsTo]-(m {role:'employee'}) RETURN m",
    "g.V().has('name', 'Charlie').in('knows')": "MATCH (n {name:'Charlie'})<-[:knows]-(m) RETURN m",
    "g.V().has('status', 'active')": "MATCH (n {status:'active'}) RETURN n",
    "g.V().has('status', 'inactive')": "MATCH (n {status:'inactive'}) RETURN n",
    "g.V().has('type', 'premium')": "MATCH (n) WHERE n.type = 'premium' RETURN n",
    "g.V().has('type', 'basic')": "MATCH (n) WHERE n.type = 'basic' RETURN n",
    "g.V().has('name', 'Dennis').repeat(both()).times(4)": "MATCH (n {name:'Dennis'})-[*4]-(m) RETURN m",
    "g.V().has('name', 'Emily').repeat(out('friend')).times(2)": "MATCH (n {name:'Emily'})-[:friend*2]->(m) RETURN m",
    "g.V().has('price', gt(100)).values('price')": "MATCH (n) WHERE n.price > 100 RETURN n.price",
    "g.V().has('price', lte(100)).values('price')": "MATCH (n) WHERE n.price <= 100 RETURN n.price",
    "g.V().has('rating', gt(4.5))": "MATCH (n) WHERE n.rating > 4.5 RETURN n",
    "g.V().has('rating', between(3.5.0))": "MATCH (n) WHERE n.rating >= 3.5 AND n.rating <= 0 RETURN n",
    "g.E().has('transaction', 'complete')": "MATCH ()-[r {transaction:'complete'}]-() RETURN r",
    "g.V().has('category', 'books')": "MATCH (n) WHERE n.category = 'books' RETURN n",
    "g.V().has('category', 'electronics')": "MATCH (n) WHERE n.category = 'electronics' RETURN n",
    "g.V().has('name', 'Fiona').in('bought')": "MATCH (n {name:'Fiona'})<-[:bought]-(m) RETURN m",
    "g.V().has('name', 'George').out('sold')": "MATCH (n {name:'George'})-[:sold]->(m) RETURN m",
    "g.V().repeat(out('friend')).times(5).path()": "MATCH p=(n)-[:friend*5]->(m) RETURN p",
    "g.V().repeat(in('friend')).times(5).path()": "MATCH p=(n)<-[:friend*5]-(m) RETURN p",
    "g.V().has('region', 'APAC')": "MATCH (n) WHERE n.region = 'APAC' RETURN n",
    "g.V().has('region', 'EMEA')": "MATCH (n) WHERE n.region = 'EMEA' RETURN n",
    "g.V().has('region', 'NA')": "MATCH (n) WHERE n.region = 'NA' RETURN n",
    "g.V().has('visited', within('Paris','London'))": "MATCH (n) WHERE n.visited IN ['Paris','London'] RETURN n",
    "g.V().has('visited', without('Tokyo'))": "MATCH (n) WHERE NOT('Tokyo' IN n.visited) RETURN n",
    "g.V().out('follows').has('name', 'Helen')": "MATCH (n)-[:follows]->(m {name:'Helen'}) RETURN m",
    "g.V().in('follows').has('name', 'Ian')": "MATCH (n)<-[:follows]-(m {name:'Ian'}) RETURN m",
    "g.V().both('follows').has('name', 'John')": "MATCH (n)-[:follows]-(m {name:'John'}) RETURN m",
    "g.V().out('likes').dedup()": "MATCH (n)-[:likes]->(m) RETURN DISTINCT m",
    "g.V().in('likes').dedup()": "MATCH (n)<-[:likes]-(m) RETURN DISTINCT m",
    "g.V().has('dob', lte('2000-01-01'))": "MATCH (n) WHERE n.dob <= '2000-01-01' RETURN n",
    "g.V().has('dob', gt('1990-01-01'))": "MATCH (n) WHERE n.dob > '1990-01-01' RETURN n",
    "g.V().has('score', lt(50))": "MATCH (n) WHERE n.score < 50 RETURN n",
    "g.V().has('score', gte(90))": "MATCH (n) WHERE n.score >= 90 RETURN n",
    "g.V().has('language', 'English')": "MATCH (n) WHERE n.language = 'English' RETURN n",
    "g.V().has('language', 'Japanese')": "MATCH (n) WHERE n.language = 'Japanese' RETURN n",
    "g.V().repeat(out('recommend')).times(3)": "MATCH (n)-[:recommend*3]->(m) RETURN m",
    "g.V().repeat(in('recommend')).times(3)": "MATCH (n)<-[:recommend*3]-(m) RETURN m",
    "g.V().has('name', 'Karen').both('worksWith')": "MATCH (k {name: 'Karen'})-[:worksWith]-(colleague) RETURN colleague",
    "g.V().has('name', 'Leo').both('collaborates')": "MATCH (n {name:'Leo'})-[:collaborates]-(m) RETURN m",
    "g.V().has('name', 'Monica').both('reportsTo')": "MATCH (n {name:'Monica'})-[:reportsTo]-(m) RETURN m",
    "g.V().has('status', 'pending')": "MATCH (n) WHERE n.status = 'pending' RETURN n",
    "g.V().has('status', 'approved')": "MATCH (n) WHERE n.status = 'approved' RETURN n",
    "g.V().has('status', 'rejected')": "MATCH (n) WHERE n.status = 'rejected' RETURN n",
    "g.V().has('name', 'Nathan').out('subordinate')": "MATCH (n {name:'Nathan'})-[:subordinate]->(m) RETURN m",
    "g.V().has('name', 'Olivia').in('subordinate')": "MATCH (n {name:'Olivia'})<-[:subordinate]-(m) RETURN m",
    "g.V().has('department', 'HR').group().by('role')": "MATCH (n) WHERE n.department = 'HR' RETURN n.role AS role, COLLECT(n) AS vertices",
    "g.V().has('department', 'Engineering').group().by('skill')": "MATCH (n) WHERE n.department = 'Engineering' RETURN n.skill AS skill, COLLECT(n) AS vertices",
    "g.V().has('name', 'Paul').out('collaborates').dedup()": "MATCH (n {name:'Paul'})-[:collaborates]->(m) RETURN DISTINCT m",
    "g.V().has('experience', gt(5))": "MATCH (n) WHERE n.experience > 5 RETURN n",
    "g.V().has('experience', lt(2))": "MATCH (n) WHERE n.experience < 2 RETURN n",
    "g.V().has('level', 'senior')": "MATCH (n) WHERE n.level = 'senior' RETURN n",
    "g.V().has('level', 'junior')": "MATCH (n) WHERE n.level = 'junior' RETURN n",
    "g.V().has('name', 'Quinn').out('mentor')": "MATCH (n {name:'Quinn'})-[:mentor]->(m) RETURN m",
    "g.V().has('name', 'Rachel').in('mentor')": "MATCH (n {name:'Rachel'})<-[:mentor]-(m) RETURN m",
    "g.V().has('employeeId', eq(1001))": "MATCH (n) WHERE n.employeeId = 1001 RETURN n",
    "g.V().has('employeeId', eq(1002))": "MATCH (n) WHERE n.employeeId = 1002 RETURN n",
    "g.V().has('joinDate', between('2020-01-01','2021-01-01'))": "MATCH (n) WHERE n.joinDate >= '2020-01-01' AND n.joinDate <= '2021-01-01' RETURN n",
    "g.V().has('joinDate', gte('2022-01-01'))": "MATCH (n) WHERE n.joinDate >= '2022-01-01' RETURN n",
    "g.V().has('title', 'CEO')": "MATCH (n) WHERE n.title = 'CEO' RETURN n",
    "g.V().has('title', 'CTO')": "MATCH (n) WHERE n.title = 'CTO' RETURN n",
    "g.V().has('project', 'Apollo')": "MATCH (n) WHERE n.project = 'Apollo' RETURN n",
    "g.V().has('project', 'Zeus')": "MATCH (n) WHERE n.project = 'Zeus' RETURN n",
    "g.V().has('name', 'Steve').repeat(out('colleague')).times(3)": "MATCH (n {name:'Steve'})-[:colleague*3]->(m) RETURN m",
    "g.V().has('name', 'Tina').repeat(in('colleague')).times(3)": "MATCH (n {name:'Tina'})<-[:colleague*3]-(m) RETURN m",
    "g.V().out('friend').in('friend')": "MATCH (n)-[:friend]->(m)-[:friend]->(o) RETURN o",
    "g.V().out('friend').out('friend')": "MATCH (n)-[:friend]->(m)-[:friend]->(o) RETURN o",
    "g.V().both('friend').values('name').dedup()": "MATCH (n)-[:friend]-(m) RETURN DISTINCT m.name",
    "g.V().has('group', 'admin')": "MATCH (n) WHERE n.group = 'admin' RETURN n",
    "g.V().has('group', 'user')": "MATCH (n) WHERE n.group = 'user' RETURN n",
    "g.V().has('session', 'active')": "MATCH (n) WHERE n.session = 'active' RETURN n",
    "g.V().has('session', 'expired')": "MATCH (n) WHERE n.session = 'expired' RETURN n",
    "g.V().has('key', 'value')": "MATCH (n) WHERE n.key = 'value' RETURN n",
    "g.V().has('label', 'custom').limit(10)": "MATCH (n {label:'custom'}) RETURN n LIMIT 10",
    "g.V().bothE('connects').otherV().dedup()": "MATCH (n)-[r:connects]-(m) RETURN DISTINCT m",
    "g.V().has('name', 'Uma').both('connects')": "MATCH (n {name:'Uma'})-[:connects]-(m) RETURN m",
    "g.E().has('distance', lte(100))": "MATCH ()-[r]-() WHERE r.distance <= 100 RETURN r",
    "g.E().has('distance', gt(100))": "MATCH ()-[r]-() WHERE r.distance > 100 RETURN r",
    "g.V().has('name', 'Victor').repeat(out('friend')).times(2)": "MATCH (n {name:'Victor'})-[:friend*2]->(m) RETURN m",
    "g.V().has('name', 'Wendy').repeat(in('friend')).times(2)": "MATCH (n {name:'Wendy'})<-[:friend*2]-(m) RETURN m",
    "g.V().has('role', 'admin').out('manages')": "MATCH (n {role:'admin'})-[:manages]->(m) RETURN m",
    "g.V().has('role', 'employee').in('manages')": "MATCH (n {role:'employee'})<-[:manages]-(m) RETURN m",
    "g.V().hasLabel('order')": "MATCH (n:order) RETURN n",
    "g.V().hasLabel('order').out('contains')": "MATCH (n:order)-[:contains]->(m) RETURN m",
    "g.V().has('product', 'Laptop')": "MATCH (n) WHERE n.product = 'Laptop' RETURN n",
    "g.V().has('product', 'Smartphone')": "MATCH (n) WHERE n.product = 'Smartphone' RETURN n",
    "g.V().has('brand', 'Dell')": "MATCH (n) WHERE n.brand = 'Dell' RETURN n",
    "g.V().has('brand', 'Apple')": "MATCH (n) WHERE n.brand = 'Apple' RETURN n",
    "g.V().has('year', gte(2020))": "MATCH (n) WHERE n.year >= 2020 RETURN n",
    "g.V().has('year', lt(2020))": "MATCH (n) WHERE n.year < 2020 RETURN n",
    "g.V().order().by('price')": "MATCH (n) RETURN n ORDER BY n.price ASC",
    "g.V().order().by('price', decr)": "MATCH (n) RETURN n ORDER BY n.price DESC",
    "g.V().has('name', 'Zack')": "MATCH (n) WHERE n.name = 'Zack' RETURN n",
    "g.V().has('status', 'ordered')": "MATCH (n) WHERE n.status = 'ordered' RETURN n",
    "g.V().has('status', 'shipped')": "MATCH (n) WHERE n.status = 'shipped' RETURN n",
    "g.V().has('status', 'delivered')": "MATCH (n) WHERE n.status = 'delivered' RETURN n",
    "g.V().has('priority', 'high')": "MATCH (n) WHERE n.priority = 'high' RETURN n",
    "g.V().has('priority', 'low')": "MATCH (n) WHERE n.priority = 'low' RETURN n",
    "g.V().has('destination', 'Paris')": "MATCH (n) WHERE n.destination = 'Paris' RETURN n",
    "g.V().has('destination', 'Berlin')": "MATCH (n) WHERE n.destination = 'Berlin' RETURN n",
    "g.V().out('purchased').has('category', 'clothing')": "MATCH (n)-[:purchased]->(m) WHERE m.category = 'clothing' RETURN m",
    "g.V().has('name','Alice').repeat(out('colleague')).times(4)": "MATCH (n {name:'Alice'})-[:colleague*4]->(m) RETURN m",
    "g.V().has('name','Bob').repeat(in('colleague')).times(4)": "MATCH (n {name:'Bob'})<-[:colleague*4]-(m) RETURN m",
    "g.V().hasLabel('device').values('ip')": "MATCH (n:device) RETURN n.ip",
    "g.V().hasLabel('device').out('connectedTo')": "MATCH (n:device)-[:connectedTo]->(m) RETURN m",
    "g.E().hasLabel('transaction').count()": "MATCH ()-[r:transaction]-() RETURN count(r)",
    "g.V().hasLabel('transaction').in('initiatedBy')": "MATCH (n:transaction)<-[:initiatedBy]-(m) RETURN m",
    "g.V().repeat(out()).times(1).count()": "MATCH (n)-[]->(m) RETURN count(m)",
    "g.V().repeat(in()).until(has('name', 'Circular')).path()": "MATCH p=(a)<-[*]-(b) WHERE a.name = 'Circular' RETURN p",
    "g.V().group().by('country').by(count())": "MATCH (n) WHERE exists(n.country) WITH n.country AS key, count(n) AS cnt RETURN collect({key:key, value:cnt})",
    "g.V().dedup().has('email')": "MATCH (n) WHERE exists(n.email) RETURN DISTINCT n",
    "g.V().has('username', 'john_doe')": "MATCH (n) WHERE n.username = 'john_doe' RETURN n",
    "g.V().has('username', 'jane_doe')": "MATCH (n) WHERE n.username = 'jane_doe' RETURN n",
    "g.V().both('follows').dedup()": "MATCH (n)-[:follows]-(m) RETURN DISTINCT m",
    "g.V().has('subject', 'math').out('teaches')": "MATCH (n {subject:'math'})-[:teaches]->(m) RETURN m",
    "g.V().has('subject', 'science').in('learns')": "MATCH (n {subject:'science'})<-[:learns]-(m) RETURN m",
    "g.V().has('course', 'CS101')": "MATCH (n) WHERE n.course = 'CS101' RETURN n",
    "g.V().has('course', 'ENG202')": "MATCH (n) WHERE n.course = 'ENG202' RETURN n",
    "g.V().in('enrolled').hasLabel('student')": "MATCH (n)<-[:enrolled]-(m:student) RETURN m",
    "g.V().out('enrolled').hasLabel('student')": "MATCH (n)-[:enrolled]->(m:student) RETURN m",
    "g.V().has('version', '1.0').out('updated')": "MATCH (n {version:'1.0'})-[:updated]->(m) RETURN m",
    "g.V().has('version', '2.0').in('updated')": "MATCH (n {version:'2.0'})<-[:updated]-(m) RETURN m",
    "g.V().has('file', 'document.txt')": "MATCH (n) WHERE n.file = 'document.txt' RETURN n",
    "g.V().has('file', 'image.png')": "MATCH (n) WHERE n.file = 'image.png' RETURN n",
    "g.V().repeat(outE('linkedTo').inV()).times(2)": "MATCH (n)-[:linkedTo]->()-[:linkedTo]->(m) RETURN m",
    "g.V().repeat(inE('linkedTo').outV()).times(2)": "MATCH (start) MATCH (start)<-[:linkedTo*2]-(target) RETURN target",
    "g.E().has('relationship', 'parent')": "MATCH ()-[r {relationship:'parent'}]-() RETURN r",
    "g.V().has('category', 'news')": "MATCH (n) WHERE n.category = 'news' RETURN n",
    "g.V().has('category', 'blog')": "MATCH (n) WHERE n.category = 'blog' RETURN n",
    "g.V().has('active', true)": "MATCH (n) WHERE n.active = true RETURN n",
    "g.V().has('active', false)": "MATCH (n) WHERE n.active = false RETURN n",
    "g.V().has('updatedAt', gt('2022-01-01'))": "MATCH (n) WHERE n.updatedAt > '2022-01-01' RETURN n",
    "g.V().has('visited', eq(10))": "MATCH (n) WHERE n.visited = 10 RETURN n",
    "g.V().has('visited', lt(5))": "MATCH (n) WHERE n.visited < 5 RETURN n",
    "g.V().has('count', gte(100))": "MATCH (n) WHERE n.count >= 100 RETURN n",
    "g.V().has('count', lte(50))": "MATCH (n) WHERE n.count <= 50 RETURN n",
    "g.V().has('reputation', gt(1000))": "MATCH (n) WHERE n.reputation > 1000 RETURN n",
    "g.V().has('reputation', lt(100))": "MATCH (n) WHERE n.reputation < 100 RETURN n",
    "g.V().bothE('mentions').otherV().groupCount()": "MATCH (n)-[r:mentions]-(m) RETURN m, count(r) AS count",
    "g.V().bothE('tags').otherV().dedup()": "MATCH (n)-[r:tags]-(m) RETURN DISTINCT m",
    "g.V().has('role', 'moderator')": "MATCH (n) WHERE n.role = 'moderator' RETURN n",
    "g.V().has('role', 'contributor')": "MATCH (n) WHERE n.role = 'contributor' RETURN n",
    "g.V().has('license', 'MIT')": "MATCH (n) WHERE n.license = 'MIT' RETURN n",
    "g.V().has('license', 'GPL')": "MATCH (n) WHERE n.license = 'GPL' RETURN n",
    "g.V().filter(has('score', within(80,90)))": "MATCH (n) WHERE n.score IN [80,90] RETURN n",
    "g.V().filter(has('score', outside(40,60)))": "MATCH (n) WHERE NOT(n.score >= 40 AND n.score <= 60) RETURN n",
    "g.V().repeat(out('refersTo')).times(3).dedup()": "MATCH (n)-[:refersTo*3]->(m) RETURN DISTINCT m",
    "g.V().repeat(in('refersTo')).times(3).dedup()": "MATCH (n)<-[:refersTo*3]-(m) RETURN DISTINCT m",
    "g.V().has('name', 'Oscar').both('colleague').dedup()": "MATCH (n {name:'Oscar'})-[:colleague]-(m) RETURN DISTINCT m",
    "g.V().has('name', 'Pam').both('colleague').dedup()": "MATCH (n {name:'Pam'})-[:colleague]-(m) RETURN DISTINCT m",
    "g.V().has('tag', 'urgent')": "MATCH (n) WHERE n.tag = 'urgent' RETURN n",
    "g.V().has('tag', 'routine')": "MATCH (n) WHERE n.tag = 'routine' RETURN n",
    "g.E().has('action', 'login')": "MATCH ()-[r]-() WHERE r.action = 'login' RETURN r",
    "g.E().has('action', 'logout')": "MATCH ()-[r]-() WHERE r.action = 'logout' RETURN r",
    "g.V().has('device', 'mobile')": "MATCH (n) WHERE n.device = 'mobile' RETURN n",
    "g.V().has('device', 'desktop')": "MATCH (n) WHERE n.device = 'desktop' RETURN n",
    "g.V().has('os', 'Windows')": "MATCH (n) WHERE n.os = 'Windows' RETURN n",
    "g.V().has('os', 'Linux')": "MATCH (n) WHERE n.os = 'Linux' RETURN n",
    "g.V().has('os', 'macOS')": "MATCH (n) WHERE n.os = 'macOS' RETURN n",
    "g.V().match(__.as('a').out('friend').as('b'), __.as('b').has('age', gt(30)))": "MATCH (a)-[:friend]->(b) WHERE b.age > 30 RETURN a, b",
    "g.V().match(__.as('a').in('reportsTo').as('b'))": "MATCH (a)<-[:reportsTo]-(b) RETURN a, b",
    "g.V().match(__.as('a').both('risks').as('b'))": "MATCH (a)-[:risks]-(b) RETURN a, b",
    "g.V().has('name', 'Quincy').project('name', 'city')": "MATCH (n {name:'Quincy'}) RETURN n.name AS name, n.city AS city",
    "g.V().has('name', 'Rita').project('name', 'role')": "MATCH (n {name:'Rita'}) RETURN n.name AS name, n.role AS role",
    "g.V().has('interest', 'music')": "MATCH (n) WHERE n.interest = 'music' RETURN n",
    "g.V().has('interest', 'sports')": "MATCH (n) WHERE n.interest = 'sports' RETURN n",
    "g.V().hasMap({'fname'": "MATCH (n) WHERE exists(n.fname) RETURN n",
    "g.V().has('bio', containing('engineer'))": "MATCH (n) WHERE n.bio CONTAINS 'engineer' RETURN n",
    "g.V().has('notes', not(within('obsolete')))": "MATCH (n) WHERE NOT(n.notes IN ['obsolete']) RETURN n",
    "g.V().has('age', eq(18))": "MATCH (n) WHERE n.age = 18 RETURN n",
    "g.V().has('age', eq(21))": "MATCH (n) WHERE n.age = 21 RETURN n",
    "g.V().has('height', gt(170))": "MATCH (n) WHERE n.height > 170 RETURN n",
    "g.V().has('height', lt(150))": "MATCH (n) WHERE n.height < 150 RETURN n",
    "g.V().bothE('affiliatedWith').otherV().has('institution', 'MIT')": "MATCH (n)-[:affiliatedWith]-(m) WHERE m.institution = 'MIT' RETURN m",
    "g.V().bothE('affiliatedWith').otherV().has('institution', 'Stanford')": "MATCH (n)-[:affiliatedWith]-(m) WHERE m.institution = 'Stanford' RETURN m",
    "g.V().repeat(out('recommends')).times(2)": "MATCH (n)-[:recommends*2]->(m) RETURN m",
    "g.V().repeat(in('recommends')).times(2)": "MATCH (n)<-[:recommends*2]-(m) RETURN m",
    "g.V().has('name', 'Tom').where(out('follows'))": "MATCH (t {name: 'Tom'}) WHERE (t)-[:follows]->() RETURN t",
    "g.V().has('name', 'Ursula').where(in('follows'))": "MATCH (u {name: 'Ursula'}) WHERE (u)<-[:follows]-() RETURN u",
    "g.V().has('alias', 'Vicky')": "MATCH (n) WHERE n.alias = 'Vicky' RETURN n",
    "g.V().has('alias', 'Walter')": "MATCH (n) WHERE n.alias = 'Walter' RETURN n",
    "g.V().has('username', startingWith('admin'))": "MATCH (n) WHERE n.username STARTS WITH 'admin' RETURN n",
    "g.V().has('username', startingWith('mod'))": "MATCH (n) WHERE n.username STARTS WITH 'mod' RETURN n",
    "g.V().dedup().has('phone')": "MATCH (n) WHERE exists(n.phone) RETURN DISTINCT n",
    "g.V().limit(20).dedup()": "MATCH (n) RETURN DISTINCT n LIMIT 20",
    "g.V().has('score', between(80))": "MATCH (n) WHERE n.score >= 80 AND n.score <= 80 RETURN n",
    "g.V().has('score', not(between(50)))": "MATCH (n) WHERE NOT(n.score >= 50 AND n.score <= 50) RETURN n",
    "g.V().hasLabel('article').out('similarTo')": "MATCH (n:article)-[:similarTo]->(m) RETURN m",
    "g.V().hasLabel('article').in('similarTo')": "MATCH (n:article)<-[:similarTo]-(m) RETURN m",
    "g.V().has('name','Xavier').both('related')": "MATCH (n {name:'Xavier'})-[:related]-(m) RETURN m",
    "g.V().has('name','Yvonne').both('related')": "MATCH (n {name:'Yvonne'})-[:related]-(m) RETURN m",
    "g.V().bothE('supports').order().by('weight', decr)": "MATCH ()-[r:supports]-() RETURN r ORDER BY r.weight DESC",
    "g.V().bothE('against').order().by('weight')": "MATCH ()-[r:against]-() RETURN r ORDER BY r.weight ASC",
    "g.V().has('key','value').limit(5)": "MATCH (n) WHERE n.key = 'value' RETURN n LIMIT 5",
    "g.V().has('attribute','color').values('color')": "MATCH (n) WHERE n.attribute = 'color' RETURN n.color",
    "g.V().both('linked').group().by('relationship')": "MATCH (n)-[:linked]-(m) RETURN m.relationship AS relationship, collect(m) AS nodes",
    "g.V().has('department','finance')": "MATCH (n) WHERE n.department = 'finance' RETURN n",
    "g.V().has('department','marketing')": "MATCH (n) WHERE n.department = 'marketing' RETURN n",
    "g.V().has('income', gt(70000))": "MATCH (n) WHERE n.income > 70000 RETURN n",
    "g.V().has('income', between(50000,90000))": "MATCH (n) WHERE n.income >= 50000 AND n.income <= 90000 RETURN n",
    "g.V().out('paidTo').has('role','vendor')": "MATCH (n)-[:paidTo]->(m) WHERE m.role = 'vendor' RETURN m",
    "g.V().in('paidTo').has('role','client')": "MATCH (n)<-[:paidTo]-(m) WHERE m.role = 'client' RETURN m",
    "g.V().repeat(out('endorses')).times(2).count()": "MATCH (n)-[:endorses*2]->(m) RETURN count(m)",
    "g.V().repeat(in('endorses')).times(2).count()": "MATCH (n)<-[:endorses*2]-(m) RETURN count(m)",
    "g.V().has('rating', eq(5)).out('reviews')": "MATCH (n) WHERE n.rating = 5 MATCH (n)-[:reviews]->(m) RETURN m",
    "g.V(person_id).toList()": "MATCH (n) WHERE id(n) = $person_id RETURN n",
    "g.V(person_id)": "MATCH (n) WHERE id(n) = $person_id RETURN n",
    "g.V(vertex).valueMap().toList()": "MATCH (n) WHERE ID(n) = $vertex RETURN properties(n)",
    "g.V(vertex).valueMap()": "MATCH (n) WHERE ID(n) = $vertex RETURN properties(n)",
    "g.V(vertex)": "MATCH (n) WHERE id(n) = $vertex RETURN n",
    "g.addV('person').property(T.id, person_id).next()": "CREATE (p:person {id: $person_id}) RETURN p",
    "g.addV('person').property(T.id, person_id)": "CREATE (p:person {id: $person_id}) RETURN p",
    "g.addV('person')": "CREATE (p:person) RETURN p",
    "g.V(person).property(prop_name, prop_value).next()": "MATCH (n) WHERE ID(n) = $person SET n[$prop_name] = $prop_value RETURN n",
    "g.V(person).property(prop_name, prop_value)": "MATCH (n) WHERE ID(n) = $person SET n[$prop_name] = $prop_value RETURN n",
    "g.V(person)": "MATCH (p) WHERE id(p) = $person RETURN p",
    "g.V(node).valueMap()": "MATCH (n) WHERE ID(n) = $node RETURN properties(n)",
    "g.V(node)": "MATCH (n) WHERE id(n) = $node RETURN n",
    "g.V(person).properties().drop().iterate()": "MATCH (p) WHERE id(p) = $person SET p = {}",
    "g.V(person).properties().drop()": "MATCH (p) WHERE id(p) = $person SET p = {}",
    "g.V(person).properties()": "MATCH (p) WHERE id(p) = $person UNWIND keys(p) AS key RETURN key, p[key] AS value",
    "g.V(from_person).outE('knows').filter(__.inV().is_(to_person)).toList()": "MATCH (a)-[r:knows]->(b) WHERE id(a) = $from_person AND id(b) = $to_person RETURN r",
    "g.V(from_person).outE('knows').filter(__.inV().is_(to_person))": "MATCH (a)-[r:knows]->(b) WHERE id(a) = $from_person AND id(b) = $to_person RETURN r",
    "g.V(from_person).outE('knows')": "MATCH (a)-[r:knows]->() WHERE id(a) = $from_person RETURN r",
    "g.V(from_person)": "MATCH (a) WHERE id(a) = $from_person RETURN a",
    "g.V(from_person).outE('knows').filter(__.inV().is_(to_person)).property('weight', weight).next()": "MATCH (a)-[r:knows]->(b) WHERE id(a) = $from_person AND id(b) = $to_person SET r.weight = $weight RETURN r",
    "g.V(from_person).outE('knows').filter(__.inV().is_(to_person)).property('weight', weight)": "MATCH (a)-[r:knows]->(b) WHERE id(a) = $from_person AND id(b) = $to_person SET r.weight = $weight RETURN r",
    "g.V(from_person).addE('knows').to(to_person).property('weight', weight).next()": "MATCH (a), (b) WHERE id(a) = $from_person AND id(b) = $to_person CREATE (a)-[r:knows {weight: $weight}]->(b) RETURN r",
    "g.V(from_person).addE('knows').to(to_person).property('weight', weight)": "MATCH (a), (b) WHERE id(a) = $from_person AND id(b) = $to_person CREATE (a)-[r:knows {weight: $weight}]->(b) RETURN r",
    "g.V(from_person).addE('knows').to(to_person)": "MATCH (a), (b) WHERE id(a) = $from_person AND id(b) = $to_person CREATE (a)-[r:knows]->(b) RETURN r",
    "g.V(from_person).addE('knows')": "MATCH (a) WHERE id(a) = $from_person CREATE (a)-[r:knows]->(:Dummy) RETURN r",
    "g.V().drop().iterate()": "MATCH (n) DETACH DELETE n",
    "g.V().drop()": "MATCH (n) DETACH DELETE n"
}

