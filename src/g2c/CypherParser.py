# Generated from Cypher.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,127,1541,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,1,0,3,0,200,8,0,1,0,1,0,3,0,204,8,0,1,0,3,0,207,8,0,1,0,
        3,0,210,8,0,1,0,1,0,1,1,1,1,1,2,1,2,3,2,218,8,2,1,3,1,3,3,3,222,
        8,3,1,3,5,3,225,8,3,10,3,12,3,228,9,3,1,4,1,4,1,4,1,4,3,4,234,8,
        4,1,4,1,4,1,4,3,4,239,8,4,1,4,3,4,242,8,4,1,5,1,5,3,5,246,8,5,1,
        6,1,6,3,6,250,8,6,5,6,252,8,6,10,6,12,6,255,9,6,1,6,1,6,1,6,3,6,
        260,8,6,5,6,262,8,6,10,6,12,6,265,9,6,1,6,1,6,3,6,269,8,6,1,6,5,
        6,272,8,6,10,6,12,6,275,9,6,1,6,3,6,278,8,6,1,6,3,6,281,8,6,3,6,
        283,8,6,1,7,1,7,3,7,287,8,7,5,7,289,8,7,10,7,12,7,292,9,7,1,7,1,
        7,3,7,296,8,7,5,7,298,8,7,10,7,12,7,301,9,7,1,7,1,7,3,7,305,8,7,
        4,7,307,8,7,11,7,12,7,308,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,318,8,
        8,1,9,1,9,1,9,3,9,323,8,9,1,10,1,10,3,10,327,8,10,1,10,1,10,3,10,
        331,8,10,1,10,1,10,3,10,335,8,10,1,10,3,10,338,8,10,1,11,1,11,3,
        11,342,8,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,3,12,352,8,12,
        1,12,1,12,1,12,5,12,357,8,12,10,12,12,12,360,9,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,372,8,13,1,14,1,14,3,14,
        376,8,14,1,14,1,14,1,15,1,15,3,15,382,8,15,1,15,1,15,1,15,5,15,387,
        8,15,10,15,12,15,390,9,15,1,16,1,16,3,16,394,8,16,1,16,1,16,3,16,
        398,8,16,1,16,1,16,1,16,1,16,3,16,404,8,16,1,16,1,16,3,16,408,8,
        16,1,16,1,16,1,16,1,16,3,16,414,8,16,1,16,1,16,3,16,418,8,16,1,16,
        1,16,1,16,1,16,3,16,424,8,16,1,16,1,16,3,16,428,8,16,1,17,1,17,3,
        17,432,8,17,1,17,1,17,3,17,436,8,17,1,17,1,17,3,17,440,8,17,1,17,
        1,17,3,17,444,8,17,1,17,5,17,447,8,17,10,17,12,17,450,9,17,1,18,
        1,18,1,18,1,18,3,18,456,8,18,1,18,1,18,3,18,460,8,18,1,18,5,18,463,
        8,18,10,18,12,18,466,9,18,1,19,1,19,1,19,1,19,3,19,472,8,19,1,20,
        1,20,1,20,1,20,3,20,478,8,20,1,20,1,20,1,20,3,20,483,8,20,1,21,1,
        21,1,21,1,21,3,21,489,8,21,1,21,1,21,1,21,1,21,3,21,495,8,21,1,22,
        1,22,1,22,3,22,500,8,22,1,22,1,22,3,22,504,8,22,1,22,5,22,507,8,
        22,10,22,12,22,510,9,22,3,22,512,8,22,1,22,3,22,515,8,22,1,22,3,
        22,518,8,22,1,23,1,23,1,23,1,23,1,23,3,23,525,8,23,1,23,1,23,1,24,
        1,24,1,24,3,24,532,8,24,1,24,3,24,535,8,24,1,25,1,25,1,25,1,26,3,
        26,541,8,26,1,26,3,26,544,8,26,1,26,1,26,1,26,1,26,3,26,550,8,26,
        1,26,1,26,3,26,554,8,26,1,26,1,26,3,26,558,8,26,1,27,1,27,3,27,562,
        8,27,1,27,1,27,3,27,566,8,27,1,27,5,27,569,8,27,10,27,12,27,572,
        9,27,1,27,1,27,3,27,576,8,27,1,27,1,27,3,27,580,8,27,1,27,5,27,583,
        8,27,10,27,12,27,586,9,27,3,27,588,8,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,3,28,597,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,
        606,8,29,1,29,5,29,609,8,29,10,29,12,29,612,9,29,1,30,1,30,1,30,
        1,30,1,31,1,31,1,31,1,31,1,32,1,32,3,32,624,8,32,1,32,3,32,627,8,
        32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,635,8,34,1,34,1,34,3,34,639,
        8,34,1,34,5,34,642,8,34,10,34,12,34,645,9,34,1,35,1,35,3,35,649,
        8,35,1,35,1,35,3,35,653,8,35,1,35,1,35,1,35,3,35,658,8,35,1,36,1,
        36,1,37,1,37,3,37,664,8,37,1,37,5,37,667,8,37,10,37,12,37,670,9,
        37,1,37,1,37,1,37,1,37,3,37,676,8,37,1,38,1,38,3,38,680,8,38,1,38,
        1,38,3,38,684,8,38,3,38,686,8,38,1,38,1,38,3,38,690,8,38,3,38,692,
        8,38,1,38,1,38,3,38,696,8,38,3,38,698,8,38,1,38,1,38,1,39,1,39,3,
        39,704,8,39,1,39,1,39,1,40,1,40,3,40,710,8,40,1,40,1,40,3,40,714,
        8,40,1,40,3,40,717,8,40,1,40,3,40,720,8,40,1,40,1,40,3,40,724,8,
        40,1,40,1,40,1,40,1,40,3,40,730,8,40,1,40,1,40,3,40,734,8,40,1,40,
        3,40,737,8,40,1,40,3,40,740,8,40,1,40,1,40,1,40,1,40,3,40,746,8,
        40,1,40,3,40,749,8,40,1,40,3,40,752,8,40,1,40,1,40,3,40,756,8,40,
        1,40,1,40,1,40,1,40,3,40,762,8,40,1,40,3,40,765,8,40,1,40,3,40,768,
        8,40,1,40,1,40,3,40,772,8,40,1,41,1,41,3,41,776,8,41,1,41,1,41,3,
        41,780,8,41,3,41,782,8,41,1,41,1,41,3,41,786,8,41,3,41,788,8,41,
        1,41,3,41,791,8,41,1,41,1,41,3,41,795,8,41,3,41,797,8,41,1,41,1,
        41,1,42,1,42,3,42,803,8,42,1,43,1,43,3,43,807,8,43,1,43,1,43,3,43,
        811,8,43,1,43,1,43,3,43,815,8,43,1,43,3,43,818,8,43,1,43,5,43,821,
        8,43,10,43,12,43,824,9,43,1,44,1,44,3,44,828,8,44,1,44,5,44,831,
        8,44,10,44,12,44,834,9,44,1,45,1,45,3,45,838,8,45,1,45,1,45,1,46,
        1,46,3,46,844,8,46,1,46,1,46,3,46,848,8,46,3,46,850,8,46,1,46,1,
        46,3,46,854,8,46,1,46,1,46,3,46,858,8,46,3,46,860,8,46,3,46,862,
        8,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,5,50,
        875,8,50,10,50,12,50,878,9,50,1,51,1,51,1,51,1,51,1,51,5,51,885,
        8,51,10,51,12,51,888,9,51,1,52,1,52,1,52,1,52,1,52,5,52,895,8,52,
        10,52,12,52,898,9,52,1,53,1,53,3,53,902,8,53,5,53,904,8,53,10,53,
        12,53,907,9,53,1,53,1,53,1,54,1,54,3,54,913,8,54,1,54,5,54,916,8,
        54,10,54,12,54,919,9,54,1,55,1,55,3,55,923,8,55,1,55,1,55,3,55,927,
        8,55,1,55,1,55,3,55,931,8,55,1,55,1,55,3,55,935,8,55,1,55,5,55,938,
        8,55,10,55,12,55,941,9,55,1,56,1,56,3,56,945,8,56,1,56,1,56,3,56,
        949,8,56,1,56,1,56,3,56,953,8,56,1,56,1,56,3,56,957,8,56,1,56,1,
        56,3,56,961,8,56,1,56,1,56,3,56,965,8,56,1,56,5,56,968,8,56,10,56,
        12,56,971,9,56,1,57,1,57,3,57,975,8,57,1,57,1,57,3,57,979,8,57,1,
        57,5,57,982,8,57,10,57,12,57,985,9,57,1,58,1,58,3,58,989,8,58,5,
        58,991,8,58,10,58,12,58,994,9,58,1,58,1,58,1,59,1,59,1,59,1,59,5,
        59,1002,8,59,10,59,12,59,1005,9,59,1,60,1,60,1,60,3,60,1010,8,60,
        1,60,1,60,3,60,1014,8,60,1,60,1,60,1,60,1,60,1,60,3,60,1021,8,60,
        1,60,1,60,3,60,1025,8,60,1,60,1,60,3,60,1029,8,60,1,60,3,60,1032,
        8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1044,
        8,61,1,61,3,61,1047,8,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,3,62,1061,8,62,1,63,1,63,3,63,1065,8,63,1,63,
        5,63,1068,8,63,10,63,12,63,1071,9,63,1,63,3,63,1074,8,63,1,63,3,
        63,1077,8,63,1,64,1,64,1,64,1,64,1,64,3,64,1084,8,64,1,64,1,64,3,
        64,1088,8,64,1,64,1,64,3,64,1092,8,64,1,64,1,64,1,64,1,64,1,64,3,
        64,1099,8,64,1,64,1,64,3,64,1103,8,64,1,64,1,64,3,64,1107,8,64,1,
        64,1,64,1,64,1,64,3,64,1113,8,64,1,64,1,64,3,64,1117,8,64,1,64,1,
        64,3,64,1121,8,64,1,64,1,64,1,64,1,64,3,64,1127,8,64,1,64,1,64,3,
        64,1131,8,64,1,64,1,64,3,64,1135,8,64,1,64,1,64,1,64,1,64,3,64,1141,
        8,64,1,64,1,64,3,64,1145,8,64,1,64,1,64,3,64,1149,8,64,1,64,1,64,
        1,64,1,64,1,64,1,64,3,64,1157,8,64,1,65,1,65,1,65,1,65,1,65,1,65,
        3,65,1165,8,65,1,66,1,66,1,67,1,67,3,67,1171,8,67,1,67,1,67,3,67,
        1175,8,67,1,67,1,67,3,67,1179,8,67,1,67,1,67,3,67,1183,8,67,5,67,
        1185,8,67,10,67,12,67,1188,9,67,3,67,1190,8,67,1,67,1,67,1,68,1,
        68,3,68,1196,8,68,1,68,1,68,1,68,3,68,1201,8,68,1,68,1,68,1,68,3,
        68,1206,8,68,1,68,1,68,1,68,3,68,1211,8,68,1,68,1,68,1,68,3,68,1216,
        8,68,1,68,1,68,1,68,3,68,1221,8,68,1,68,3,68,1224,8,68,1,69,1,69,
        3,69,1228,8,69,1,69,1,69,3,69,1232,8,69,1,69,1,69,1,70,1,70,3,70,
        1238,8,70,1,70,4,70,1241,8,70,11,70,12,70,1242,1,71,1,71,3,71,1247,
        8,71,1,71,3,71,1250,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,
        3,73,1260,8,73,1,73,1,73,3,73,1264,8,73,1,73,1,73,3,73,1268,8,73,
        3,73,1270,8,73,1,73,1,73,3,73,1274,8,73,1,73,1,73,3,73,1278,8,73,
        1,73,1,73,3,73,1282,8,73,5,73,1284,8,73,10,73,12,73,1287,9,73,3,
        73,1289,8,73,1,73,1,73,1,74,1,74,1,74,1,74,3,74,1297,8,74,1,75,1,
        75,3,75,1301,8,75,1,75,1,75,3,75,1305,8,75,1,75,1,75,3,75,1309,8,
        75,1,75,1,75,3,75,1313,8,75,1,75,1,75,3,75,1317,8,75,5,75,1319,8,
        75,10,75,12,75,1322,9,75,3,75,1324,8,75,1,75,1,75,1,76,1,76,1,77,
        1,77,1,78,1,78,1,78,1,79,1,79,1,79,5,79,1338,8,79,10,79,12,79,1341,
        9,79,1,80,1,80,3,80,1345,8,80,1,80,1,80,3,80,1349,8,80,1,80,1,80,
        3,80,1353,8,80,1,80,3,80,1356,8,80,1,80,3,80,1359,8,80,1,80,1,80,
        1,81,1,81,3,81,1365,8,81,1,81,1,81,3,81,1369,8,81,1,81,1,81,3,81,
        1373,8,81,3,81,1375,8,81,1,81,1,81,3,81,1379,8,81,1,81,1,81,3,81,
        1383,8,81,1,81,1,81,3,81,1387,8,81,3,81,1389,8,81,1,81,1,81,3,81,
        1393,8,81,1,81,1,81,3,81,1397,8,81,1,81,1,81,1,82,1,82,3,82,1403,
        8,82,1,82,1,82,1,83,1,83,3,83,1409,8,83,1,83,4,83,1412,8,83,11,83,
        12,83,1413,1,83,1,83,3,83,1418,8,83,1,83,1,83,3,83,1422,8,83,1,83,
        4,83,1425,8,83,11,83,12,83,1426,3,83,1429,8,83,1,83,3,83,1432,8,
        83,1,83,1,83,3,83,1436,8,83,1,83,3,83,1439,8,83,1,83,3,83,1442,8,
        83,1,83,1,83,1,84,1,84,3,84,1448,8,84,1,84,1,84,3,84,1452,8,84,1,
        84,1,84,3,84,1456,8,84,1,84,1,84,1,85,1,85,1,86,1,86,3,86,1464,8,
        86,1,87,1,87,3,87,1468,8,87,1,87,1,87,3,87,1472,8,87,1,87,1,87,3,
        87,1476,8,87,1,87,1,87,3,87,1480,8,87,1,87,1,87,3,87,1484,8,87,1,
        87,1,87,3,87,1488,8,87,1,87,1,87,3,87,1492,8,87,1,87,1,87,3,87,1496,
        8,87,5,87,1498,8,87,10,87,12,87,1501,9,87,3,87,1503,8,87,1,87,1,
        87,1,88,1,88,1,88,3,88,1510,8,88,1,89,1,89,3,89,1514,8,89,1,89,4,
        89,1517,8,89,11,89,12,89,1518,1,90,1,90,1,91,1,91,1,92,1,92,1,93,
        1,93,3,93,1529,8,93,1,94,1,94,1,95,1,95,1,96,1,96,1,97,1,97,1,98,
        1,98,1,98,0,0,99,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,
        150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,
        182,184,186,188,190,192,194,196,0,10,1,0,68,71,1,0,13,14,1,0,87,
        88,1,0,97,99,1,0,107,108,4,0,46,58,61,82,87,94,109,118,4,0,83,86,
        100,100,119,121,124,124,2,0,19,19,27,30,2,0,20,20,31,34,2,0,14,14,
        35,45,1756,0,199,1,0,0,0,2,213,1,0,0,0,4,217,1,0,0,0,6,219,1,0,0,
        0,8,241,1,0,0,0,10,245,1,0,0,0,12,282,1,0,0,0,14,306,1,0,0,0,16,
        317,1,0,0,0,18,322,1,0,0,0,20,326,1,0,0,0,22,339,1,0,0,0,24,349,
        1,0,0,0,26,371,1,0,0,0,28,373,1,0,0,0,30,379,1,0,0,0,32,427,1,0,
        0,0,34,431,1,0,0,0,36,451,1,0,0,0,38,471,1,0,0,0,40,473,1,0,0,0,
        42,484,1,0,0,0,44,511,1,0,0,0,46,524,1,0,0,0,48,528,1,0,0,0,50,536,
        1,0,0,0,52,543,1,0,0,0,54,587,1,0,0,0,56,596,1,0,0,0,58,598,1,0,
        0,0,60,613,1,0,0,0,62,617,1,0,0,0,64,621,1,0,0,0,66,628,1,0,0,0,
        68,632,1,0,0,0,70,657,1,0,0,0,72,659,1,0,0,0,74,675,1,0,0,0,76,677,
        1,0,0,0,78,701,1,0,0,0,80,771,1,0,0,0,82,773,1,0,0,0,84,802,1,0,
        0,0,86,804,1,0,0,0,88,825,1,0,0,0,90,835,1,0,0,0,92,841,1,0,0,0,
        94,863,1,0,0,0,96,865,1,0,0,0,98,867,1,0,0,0,100,869,1,0,0,0,102,
        879,1,0,0,0,104,889,1,0,0,0,106,905,1,0,0,0,108,910,1,0,0,0,110,
        920,1,0,0,0,112,942,1,0,0,0,114,972,1,0,0,0,116,992,1,0,0,0,118,
        997,1,0,0,0,120,1031,1,0,0,0,122,1043,1,0,0,0,124,1060,1,0,0,0,126,
        1062,1,0,0,0,128,1156,1,0,0,0,130,1164,1,0,0,0,132,1166,1,0,0,0,
        134,1168,1,0,0,0,136,1223,1,0,0,0,138,1225,1,0,0,0,140,1235,1,0,
        0,0,142,1244,1,0,0,0,144,1251,1,0,0,0,146,1257,1,0,0,0,148,1296,
        1,0,0,0,150,1298,1,0,0,0,152,1327,1,0,0,0,154,1329,1,0,0,0,156,1331,
        1,0,0,0,158,1339,1,0,0,0,160,1342,1,0,0,0,162,1362,1,0,0,0,164,1400,
        1,0,0,0,166,1428,1,0,0,0,168,1445,1,0,0,0,170,1459,1,0,0,0,172,1463,
        1,0,0,0,174,1465,1,0,0,0,176,1506,1,0,0,0,178,1511,1,0,0,0,180,1520,
        1,0,0,0,182,1522,1,0,0,0,184,1524,1,0,0,0,186,1528,1,0,0,0,188,1530,
        1,0,0,0,190,1532,1,0,0,0,192,1534,1,0,0,0,194,1536,1,0,0,0,196,1538,
        1,0,0,0,198,200,5,125,0,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,
        1,0,0,0,201,206,3,2,1,0,202,204,5,125,0,0,203,202,1,0,0,0,203,204,
        1,0,0,0,204,205,1,0,0,0,205,207,5,1,0,0,206,203,1,0,0,0,206,207,
        1,0,0,0,207,209,1,0,0,0,208,210,5,125,0,0,209,208,1,0,0,0,209,210,
        1,0,0,0,210,211,1,0,0,0,211,212,5,0,0,1,212,1,1,0,0,0,213,214,3,
        4,2,0,214,3,1,0,0,0,215,218,3,6,3,0,216,218,3,42,21,0,217,215,1,
        0,0,0,217,216,1,0,0,0,218,5,1,0,0,0,219,226,3,10,5,0,220,222,5,125,
        0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,225,3,8,
        4,0,224,221,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,
        0,0,227,7,1,0,0,0,228,226,1,0,0,0,229,230,5,46,0,0,230,231,5,125,
        0,0,231,233,5,47,0,0,232,234,5,125,0,0,233,232,1,0,0,0,233,234,1,
        0,0,0,234,235,1,0,0,0,235,242,3,10,5,0,236,238,5,46,0,0,237,239,
        5,125,0,0,238,237,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,242,
        3,10,5,0,241,229,1,0,0,0,241,236,1,0,0,0,242,9,1,0,0,0,243,246,3,
        12,6,0,244,246,3,14,7,0,245,243,1,0,0,0,245,244,1,0,0,0,246,11,1,
        0,0,0,247,249,3,18,9,0,248,250,5,125,0,0,249,248,1,0,0,0,249,250,
        1,0,0,0,250,252,1,0,0,0,251,247,1,0,0,0,252,255,1,0,0,0,253,251,
        1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,283,
        3,50,25,0,257,259,3,18,9,0,258,260,5,125,0,0,259,258,1,0,0,0,259,
        260,1,0,0,0,260,262,1,0,0,0,261,257,1,0,0,0,262,265,1,0,0,0,263,
        261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,0,0,265,263,1,0,0,0,266,
        273,3,16,8,0,267,269,5,125,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,
        270,1,0,0,0,270,272,3,16,8,0,271,268,1,0,0,0,272,275,1,0,0,0,273,
        271,1,0,0,0,273,274,1,0,0,0,274,280,1,0,0,0,275,273,1,0,0,0,276,
        278,5,125,0,0,277,276,1,0,0,0,277,278,1,0,0,0,278,279,1,0,0,0,279,
        281,3,50,25,0,280,277,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,
        253,1,0,0,0,282,263,1,0,0,0,283,13,1,0,0,0,284,286,3,18,9,0,285,
        287,5,125,0,0,286,285,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,
        284,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,
        299,1,0,0,0,292,290,1,0,0,0,293,295,3,16,8,0,294,296,5,125,0,0,295,
        294,1,0,0,0,295,296,1,0,0,0,296,298,1,0,0,0,297,293,1,0,0,0,298,
        301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,
        299,1,0,0,0,302,304,3,48,24,0,303,305,5,125,0,0,304,303,1,0,0,0,
        304,305,1,0,0,0,305,307,1,0,0,0,306,290,1,0,0,0,307,308,1,0,0,0,
        308,306,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,3,12,6,0,
        311,15,1,0,0,0,312,318,3,28,14,0,313,318,3,24,12,0,314,318,3,34,
        17,0,315,318,3,30,15,0,316,318,3,36,18,0,317,312,1,0,0,0,317,313,
        1,0,0,0,317,314,1,0,0,0,317,315,1,0,0,0,317,316,1,0,0,0,318,17,1,
        0,0,0,319,323,3,20,10,0,320,323,3,22,11,0,321,323,3,40,20,0,322,
        319,1,0,0,0,322,320,1,0,0,0,322,321,1,0,0,0,323,19,1,0,0,0,324,325,
        5,48,0,0,325,327,5,125,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,328,
        1,0,0,0,328,330,5,49,0,0,329,331,5,125,0,0,330,329,1,0,0,0,330,331,
        1,0,0,0,331,332,1,0,0,0,332,337,3,68,34,0,333,335,5,125,0,0,334,
        333,1,0,0,0,334,335,1,0,0,0,335,336,1,0,0,0,336,338,3,66,33,0,337,
        334,1,0,0,0,337,338,1,0,0,0,338,21,1,0,0,0,339,341,5,50,0,0,340,
        342,5,125,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,0,0,0,343,
        344,3,98,49,0,344,345,5,125,0,0,345,346,5,51,0,0,346,347,5,125,0,
        0,347,348,3,170,85,0,348,23,1,0,0,0,349,351,5,52,0,0,350,352,5,125,
        0,0,351,350,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,358,3,70,
        35,0,354,355,5,125,0,0,355,357,3,26,13,0,356,354,1,0,0,0,357,360,
        1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,25,1,0,0,0,360,358,1,
        0,0,0,361,362,5,53,0,0,362,363,5,125,0,0,363,364,5,49,0,0,364,365,
        5,125,0,0,365,372,3,30,15,0,366,367,5,53,0,0,367,368,5,125,0,0,368,
        369,5,54,0,0,369,370,5,125,0,0,370,372,3,30,15,0,371,361,1,0,0,0,
        371,366,1,0,0,0,372,27,1,0,0,0,373,375,5,54,0,0,374,376,5,125,0,
        0,375,374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,3,68,34,
        0,378,29,1,0,0,0,379,381,5,55,0,0,380,382,5,125,0,0,381,380,1,0,
        0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,388,3,32,16,0,384,385,5,
        2,0,0,385,387,3,32,16,0,386,384,1,0,0,0,387,390,1,0,0,0,388,386,
        1,0,0,0,388,389,1,0,0,0,389,31,1,0,0,0,390,388,1,0,0,0,391,393,3,
        178,89,0,392,394,5,125,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,395,
        1,0,0,0,395,397,5,3,0,0,396,398,5,125,0,0,397,396,1,0,0,0,397,398,
        1,0,0,0,398,399,1,0,0,0,399,400,3,98,49,0,400,428,1,0,0,0,401,403,
        3,170,85,0,402,404,5,125,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,
        405,1,0,0,0,405,407,5,3,0,0,406,408,5,125,0,0,407,406,1,0,0,0,407,
        408,1,0,0,0,408,409,1,0,0,0,409,410,3,98,49,0,410,428,1,0,0,0,411,
        413,3,170,85,0,412,414,5,125,0,0,413,412,1,0,0,0,413,414,1,0,0,0,
        414,415,1,0,0,0,415,417,5,4,0,0,416,418,5,125,0,0,417,416,1,0,0,
        0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,3,98,49,0,420,428,1,0,
        0,0,421,423,3,170,85,0,422,424,5,125,0,0,423,422,1,0,0,0,423,424,
        1,0,0,0,424,425,1,0,0,0,425,426,3,88,44,0,426,428,1,0,0,0,427,391,
        1,0,0,0,427,401,1,0,0,0,427,411,1,0,0,0,427,421,1,0,0,0,428,33,1,
        0,0,0,429,430,5,56,0,0,430,432,5,125,0,0,431,429,1,0,0,0,431,432,
        1,0,0,0,432,433,1,0,0,0,433,435,5,57,0,0,434,436,5,125,0,0,435,434,
        1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,437,448,3,98,49,0,438,440,
        5,125,0,0,439,438,1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,443,
        5,2,0,0,442,444,5,125,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,445,
        1,0,0,0,445,447,3,98,49,0,446,439,1,0,0,0,447,450,1,0,0,0,448,446,
        1,0,0,0,448,449,1,0,0,0,449,35,1,0,0,0,450,448,1,0,0,0,451,452,5,
        58,0,0,452,453,5,125,0,0,453,464,3,38,19,0,454,456,5,125,0,0,455,
        454,1,0,0,0,455,456,1,0,0,0,456,457,1,0,0,0,457,459,5,2,0,0,458,
        460,5,125,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,
        463,3,38,19,0,462,455,1,0,0,0,463,466,1,0,0,0,464,462,1,0,0,0,464,
        465,1,0,0,0,465,37,1,0,0,0,466,464,1,0,0,0,467,468,3,170,85,0,468,
        469,3,88,44,0,469,472,1,0,0,0,470,472,3,178,89,0,471,467,1,0,0,0,
        471,470,1,0,0,0,472,39,1,0,0,0,473,474,5,59,0,0,474,475,5,125,0,
        0,475,482,3,150,75,0,476,478,5,125,0,0,477,476,1,0,0,0,477,478,1,
        0,0,0,478,479,1,0,0,0,479,480,5,60,0,0,480,481,5,125,0,0,481,483,
        3,44,22,0,482,477,1,0,0,0,482,483,1,0,0,0,483,41,1,0,0,0,484,485,
        5,59,0,0,485,488,5,125,0,0,486,489,3,150,75,0,487,489,3,152,76,0,
        488,486,1,0,0,0,488,487,1,0,0,0,489,494,1,0,0,0,490,491,5,125,0,
        0,491,492,5,60,0,0,492,493,5,125,0,0,493,495,3,44,22,0,494,490,1,
        0,0,0,494,495,1,0,0,0,495,43,1,0,0,0,496,512,5,5,0,0,497,508,3,46,
        23,0,498,500,5,125,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,
        0,0,0,501,503,5,2,0,0,502,504,5,125,0,0,503,502,1,0,0,0,503,504,
        1,0,0,0,504,505,1,0,0,0,505,507,3,46,23,0,506,499,1,0,0,0,507,510,
        1,0,0,0,508,506,1,0,0,0,508,509,1,0,0,0,509,512,1,0,0,0,510,508,
        1,0,0,0,511,496,1,0,0,0,511,497,1,0,0,0,512,517,1,0,0,0,513,515,
        5,125,0,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,518,
        3,66,33,0,517,514,1,0,0,0,517,518,1,0,0,0,518,45,1,0,0,0,519,520,
        3,154,77,0,520,521,5,125,0,0,521,522,5,51,0,0,522,523,5,125,0,0,
        523,525,1,0,0,0,524,519,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,
        526,527,3,170,85,0,527,47,1,0,0,0,528,529,5,61,0,0,529,534,3,52,
        26,0,530,532,5,125,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,533,1,
        0,0,0,533,535,3,66,33,0,534,531,1,0,0,0,534,535,1,0,0,0,535,49,1,
        0,0,0,536,537,5,62,0,0,537,538,3,52,26,0,538,51,1,0,0,0,539,541,
        5,125,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,544,
        5,63,0,0,543,540,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,
        5,125,0,0,546,549,3,54,27,0,547,548,5,125,0,0,548,550,3,58,29,0,
        549,547,1,0,0,0,549,550,1,0,0,0,550,553,1,0,0,0,551,552,5,125,0,
        0,552,554,3,60,30,0,553,551,1,0,0,0,553,554,1,0,0,0,554,557,1,0,
        0,0,555,556,5,125,0,0,556,558,3,62,31,0,557,555,1,0,0,0,557,558,
        1,0,0,0,558,53,1,0,0,0,559,570,5,5,0,0,560,562,5,125,0,0,561,560,
        1,0,0,0,561,562,1,0,0,0,562,563,1,0,0,0,563,565,5,2,0,0,564,566,
        5,125,0,0,565,564,1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,569,
        3,56,28,0,568,561,1,0,0,0,569,572,1,0,0,0,570,568,1,0,0,0,570,571,
        1,0,0,0,571,588,1,0,0,0,572,570,1,0,0,0,573,584,3,56,28,0,574,576,
        5,125,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,579,
        5,2,0,0,578,580,5,125,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,
        1,0,0,0,581,583,3,56,28,0,582,575,1,0,0,0,583,586,1,0,0,0,584,582,
        1,0,0,0,584,585,1,0,0,0,585,588,1,0,0,0,586,584,1,0,0,0,587,559,
        1,0,0,0,587,573,1,0,0,0,588,55,1,0,0,0,589,590,3,98,49,0,590,591,
        5,125,0,0,591,592,5,51,0,0,592,593,5,125,0,0,593,594,3,170,85,0,
        594,597,1,0,0,0,595,597,3,98,49,0,596,589,1,0,0,0,596,595,1,0,0,
        0,597,57,1,0,0,0,598,599,5,64,0,0,599,600,5,125,0,0,600,601,5,65,
        0,0,601,602,5,125,0,0,602,610,3,64,32,0,603,605,5,2,0,0,604,606,
        5,125,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,0,0,0,607,609,
        3,64,32,0,608,603,1,0,0,0,609,612,1,0,0,0,610,608,1,0,0,0,610,611,
        1,0,0,0,611,59,1,0,0,0,612,610,1,0,0,0,613,614,5,66,0,0,614,615,
        5,125,0,0,615,616,3,98,49,0,616,61,1,0,0,0,617,618,5,67,0,0,618,
        619,5,125,0,0,619,620,3,98,49,0,620,63,1,0,0,0,621,626,3,98,49,0,
        622,624,5,125,0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,
        0,625,627,7,0,0,0,626,623,1,0,0,0,626,627,1,0,0,0,627,65,1,0,0,0,
        628,629,5,72,0,0,629,630,5,125,0,0,630,631,3,98,49,0,631,67,1,0,
        0,0,632,643,3,70,35,0,633,635,5,125,0,0,634,633,1,0,0,0,634,635,
        1,0,0,0,635,636,1,0,0,0,636,638,5,2,0,0,637,639,5,125,0,0,638,637,
        1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,642,3,70,35,0,641,634,
        1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,69,1,
        0,0,0,645,643,1,0,0,0,646,648,3,170,85,0,647,649,5,125,0,0,648,647,
        1,0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,652,5,3,0,0,651,653,
        5,125,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,
        3,72,36,0,655,658,1,0,0,0,656,658,3,72,36,0,657,646,1,0,0,0,657,
        656,1,0,0,0,658,71,1,0,0,0,659,660,3,74,37,0,660,73,1,0,0,0,661,
        668,3,76,38,0,662,664,5,125,0,0,663,662,1,0,0,0,663,664,1,0,0,0,
        664,665,1,0,0,0,665,667,3,78,39,0,666,663,1,0,0,0,667,670,1,0,0,
        0,668,666,1,0,0,0,668,669,1,0,0,0,669,676,1,0,0,0,670,668,1,0,0,
        0,671,672,5,6,0,0,672,673,3,74,37,0,673,674,5,7,0,0,674,676,1,0,
        0,0,675,661,1,0,0,0,675,671,1,0,0,0,676,75,1,0,0,0,677,679,5,6,0,
        0,678,680,5,125,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,685,1,0,
        0,0,681,683,3,170,85,0,682,684,5,125,0,0,683,682,1,0,0,0,683,684,
        1,0,0,0,684,686,1,0,0,0,685,681,1,0,0,0,685,686,1,0,0,0,686,691,
        1,0,0,0,687,689,3,88,44,0,688,690,5,125,0,0,689,688,1,0,0,0,689,
        690,1,0,0,0,690,692,1,0,0,0,691,687,1,0,0,0,691,692,1,0,0,0,692,
        697,1,0,0,0,693,695,3,84,42,0,694,696,5,125,0,0,695,694,1,0,0,0,
        695,696,1,0,0,0,696,698,1,0,0,0,697,693,1,0,0,0,697,698,1,0,0,0,
        698,699,1,0,0,0,699,700,5,7,0,0,700,77,1,0,0,0,701,703,3,80,40,0,
        702,704,5,125,0,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,
        0,705,706,3,76,38,0,706,79,1,0,0,0,707,709,3,192,96,0,708,710,5,
        125,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,713,
        3,196,98,0,712,714,5,125,0,0,713,712,1,0,0,0,713,714,1,0,0,0,714,
        716,1,0,0,0,715,717,3,82,41,0,716,715,1,0,0,0,716,717,1,0,0,0,717,
        719,1,0,0,0,718,720,5,125,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,
        721,1,0,0,0,721,723,3,196,98,0,722,724,5,125,0,0,723,722,1,0,0,0,
        723,724,1,0,0,0,724,725,1,0,0,0,725,726,3,194,97,0,726,772,1,0,0,
        0,727,729,3,192,96,0,728,730,5,125,0,0,729,728,1,0,0,0,729,730,1,
        0,0,0,730,731,1,0,0,0,731,733,3,196,98,0,732,734,5,125,0,0,733,732,
        1,0,0,0,733,734,1,0,0,0,734,736,1,0,0,0,735,737,3,82,41,0,736,735,
        1,0,0,0,736,737,1,0,0,0,737,739,1,0,0,0,738,740,5,125,0,0,739,738,
        1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,742,3,196,98,0,742,772,
        1,0,0,0,743,745,3,196,98,0,744,746,5,125,0,0,745,744,1,0,0,0,745,
        746,1,0,0,0,746,748,1,0,0,0,747,749,3,82,41,0,748,747,1,0,0,0,748,
        749,1,0,0,0,749,751,1,0,0,0,750,752,5,125,0,0,751,750,1,0,0,0,751,
        752,1,0,0,0,752,753,1,0,0,0,753,755,3,196,98,0,754,756,5,125,0,0,
        755,754,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,758,3,194,97,
        0,758,772,1,0,0,0,759,761,3,196,98,0,760,762,5,125,0,0,761,760,1,
        0,0,0,761,762,1,0,0,0,762,764,1,0,0,0,763,765,3,82,41,0,764,763,
        1,0,0,0,764,765,1,0,0,0,765,767,1,0,0,0,766,768,5,125,0,0,767,766,
        1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,0,769,770,3,196,98,0,770,772,
        1,0,0,0,771,707,1,0,0,0,771,727,1,0,0,0,771,743,1,0,0,0,771,759,
        1,0,0,0,772,81,1,0,0,0,773,775,5,8,0,0,774,776,5,125,0,0,775,774,
        1,0,0,0,775,776,1,0,0,0,776,781,1,0,0,0,777,779,3,170,85,0,778,780,
        5,125,0,0,779,778,1,0,0,0,779,780,1,0,0,0,780,782,1,0,0,0,781,777,
        1,0,0,0,781,782,1,0,0,0,782,787,1,0,0,0,783,785,3,86,43,0,784,786,
        5,125,0,0,785,784,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,783,
        1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,0,789,791,3,92,46,0,790,789,
        1,0,0,0,790,791,1,0,0,0,791,796,1,0,0,0,792,794,3,84,42,0,793,795,
        5,125,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,797,1,0,0,0,796,792,
        1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,799,5,9,0,0,799,83,1,
        0,0,0,800,803,3,174,87,0,801,803,3,176,88,0,802,800,1,0,0,0,802,
        801,1,0,0,0,803,85,1,0,0,0,804,806,5,10,0,0,805,807,5,125,0,0,806,
        805,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,822,3,96,48,0,809,
        811,5,125,0,0,810,809,1,0,0,0,810,811,1,0,0,0,811,812,1,0,0,0,812,
        814,5,11,0,0,813,815,5,10,0,0,814,813,1,0,0,0,814,815,1,0,0,0,815,
        817,1,0,0,0,816,818,5,125,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,
        819,1,0,0,0,819,821,3,96,48,0,820,810,1,0,0,0,821,824,1,0,0,0,822,
        820,1,0,0,0,822,823,1,0,0,0,823,87,1,0,0,0,824,822,1,0,0,0,825,832,
        3,90,45,0,826,828,5,125,0,0,827,826,1,0,0,0,827,828,1,0,0,0,828,
        829,1,0,0,0,829,831,3,90,45,0,830,827,1,0,0,0,831,834,1,0,0,0,832,
        830,1,0,0,0,832,833,1,0,0,0,833,89,1,0,0,0,834,832,1,0,0,0,835,837,
        5,10,0,0,836,838,5,125,0,0,837,836,1,0,0,0,837,838,1,0,0,0,838,839,
        1,0,0,0,839,840,3,94,47,0,840,91,1,0,0,0,841,843,5,5,0,0,842,844,
        5,125,0,0,843,842,1,0,0,0,843,844,1,0,0,0,844,849,1,0,0,0,845,847,
        3,182,91,0,846,848,5,125,0,0,847,846,1,0,0,0,847,848,1,0,0,0,848,
        850,1,0,0,0,849,845,1,0,0,0,849,850,1,0,0,0,850,861,1,0,0,0,851,
        853,5,12,0,0,852,854,5,125,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,
        859,1,0,0,0,855,857,3,182,91,0,856,858,5,125,0,0,857,856,1,0,0,0,
        857,858,1,0,0,0,858,860,1,0,0,0,859,855,1,0,0,0,859,860,1,0,0,0,
        860,862,1,0,0,0,861,851,1,0,0,0,861,862,1,0,0,0,862,93,1,0,0,0,863,
        864,3,186,93,0,864,95,1,0,0,0,865,866,3,186,93,0,866,97,1,0,0,0,
        867,868,3,100,50,0,868,99,1,0,0,0,869,876,3,102,51,0,870,871,5,125,
        0,0,871,872,5,73,0,0,872,873,5,125,0,0,873,875,3,102,51,0,874,870,
        1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,876,877,1,0,0,0,877,101,
        1,0,0,0,878,876,1,0,0,0,879,886,3,104,52,0,880,881,5,125,0,0,881,
        882,5,74,0,0,882,883,5,125,0,0,883,885,3,104,52,0,884,880,1,0,0,
        0,885,888,1,0,0,0,886,884,1,0,0,0,886,887,1,0,0,0,887,103,1,0,0,
        0,888,886,1,0,0,0,889,896,3,106,53,0,890,891,5,125,0,0,891,892,5,
        75,0,0,892,893,5,125,0,0,893,895,3,106,53,0,894,890,1,0,0,0,895,
        898,1,0,0,0,896,894,1,0,0,0,896,897,1,0,0,0,897,105,1,0,0,0,898,
        896,1,0,0,0,899,901,5,76,0,0,900,902,5,125,0,0,901,900,1,0,0,0,901,
        902,1,0,0,0,902,904,1,0,0,0,903,899,1,0,0,0,904,907,1,0,0,0,905,
        903,1,0,0,0,905,906,1,0,0,0,906,908,1,0,0,0,907,905,1,0,0,0,908,
        909,3,108,54,0,909,107,1,0,0,0,910,917,3,110,55,0,911,913,5,125,
        0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,914,1,0,0,0,914,916,3,136,
        68,0,915,912,1,0,0,0,916,919,1,0,0,0,917,915,1,0,0,0,917,918,1,0,
        0,0,918,109,1,0,0,0,919,917,1,0,0,0,920,939,3,112,56,0,921,923,5,
        125,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,926,
        5,13,0,0,925,927,5,125,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,
        1,0,0,0,928,938,3,112,56,0,929,931,5,125,0,0,930,929,1,0,0,0,930,
        931,1,0,0,0,931,932,1,0,0,0,932,934,5,14,0,0,933,935,5,125,0,0,934,
        933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,938,3,112,56,0,937,
        922,1,0,0,0,937,930,1,0,0,0,938,941,1,0,0,0,939,937,1,0,0,0,939,
        940,1,0,0,0,940,111,1,0,0,0,941,939,1,0,0,0,942,969,3,114,57,0,943,
        945,5,125,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,
        948,5,5,0,0,947,949,5,125,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,
        950,1,0,0,0,950,968,3,114,57,0,951,953,5,125,0,0,952,951,1,0,0,0,
        952,953,1,0,0,0,953,954,1,0,0,0,954,956,5,15,0,0,955,957,5,125,0,
        0,956,955,1,0,0,0,956,957,1,0,0,0,957,958,1,0,0,0,958,968,3,114,
        57,0,959,961,5,125,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,
        0,0,0,962,964,5,16,0,0,963,965,5,125,0,0,964,963,1,0,0,0,964,965,
        1,0,0,0,965,966,1,0,0,0,966,968,3,114,57,0,967,944,1,0,0,0,967,952,
        1,0,0,0,967,960,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,
        1,0,0,0,970,113,1,0,0,0,971,969,1,0,0,0,972,983,3,116,58,0,973,975,
        5,125,0,0,974,973,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,978,
        5,17,0,0,977,979,5,125,0,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,
        1,0,0,0,980,982,3,116,58,0,981,974,1,0,0,0,982,985,1,0,0,0,983,981,
        1,0,0,0,983,984,1,0,0,0,984,115,1,0,0,0,985,983,1,0,0,0,986,988,
        7,1,0,0,987,989,5,125,0,0,988,987,1,0,0,0,988,989,1,0,0,0,989,991,
        1,0,0,0,990,986,1,0,0,0,991,994,1,0,0,0,992,990,1,0,0,0,992,993,
        1,0,0,0,993,995,1,0,0,0,994,992,1,0,0,0,995,996,3,118,59,0,996,117,
        1,0,0,0,997,1003,3,126,63,0,998,1002,3,122,61,0,999,1002,3,120,60,
        0,1000,1002,3,124,62,0,1001,998,1,0,0,0,1001,999,1,0,0,0,1001,1000,
        1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,1003,1004,1,0,0,0,1004,
        119,1,0,0,0,1005,1003,1,0,0,0,1006,1007,5,125,0,0,1007,1009,5,77,
        0,0,1008,1010,5,125,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,
        1011,1,0,0,0,1011,1032,3,126,63,0,1012,1014,5,125,0,0,1013,1012,
        1,0,0,0,1013,1014,1,0,0,0,1014,1015,1,0,0,0,1015,1016,5,8,0,0,1016,
        1017,3,98,49,0,1017,1018,5,9,0,0,1018,1032,1,0,0,0,1019,1021,5,125,
        0,0,1020,1019,1,0,0,0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1024,
        5,8,0,0,1023,1025,3,98,49,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,
        1025,1026,1,0,0,0,1026,1028,5,12,0,0,1027,1029,3,98,49,0,1028,1027,
        1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1032,5,9,0,0,1031,
        1006,1,0,0,0,1031,1013,1,0,0,0,1031,1020,1,0,0,0,1032,121,1,0,0,
        0,1033,1034,5,125,0,0,1034,1035,5,78,0,0,1035,1036,5,125,0,0,1036,
        1044,5,61,0,0,1037,1038,5,125,0,0,1038,1039,5,79,0,0,1039,1040,5,
        125,0,0,1040,1044,5,61,0,0,1041,1042,5,125,0,0,1042,1044,5,80,0,
        0,1043,1033,1,0,0,0,1043,1037,1,0,0,0,1043,1041,1,0,0,0,1044,1046,
        1,0,0,0,1045,1047,5,125,0,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,
        1047,1048,1,0,0,0,1048,1049,3,126,63,0,1049,123,1,0,0,0,1050,1051,
        5,125,0,0,1051,1052,5,81,0,0,1052,1053,5,125,0,0,1053,1061,5,82,
        0,0,1054,1055,5,125,0,0,1055,1056,5,81,0,0,1056,1057,5,125,0,0,1057,
        1058,5,76,0,0,1058,1059,5,125,0,0,1059,1061,5,82,0,0,1060,1050,1,
        0,0,0,1060,1054,1,0,0,0,1061,125,1,0,0,0,1062,1069,3,128,64,0,1063,
        1065,5,125,0,0,1064,1063,1,0,0,0,1064,1065,1,0,0,0,1065,1066,1,0,
        0,0,1066,1068,3,164,82,0,1067,1064,1,0,0,0,1068,1071,1,0,0,0,1069,
        1067,1,0,0,0,1069,1070,1,0,0,0,1070,1076,1,0,0,0,1071,1069,1,0,0,
        0,1072,1074,5,125,0,0,1073,1072,1,0,0,0,1073,1074,1,0,0,0,1074,1075,
        1,0,0,0,1075,1077,3,88,44,0,1076,1073,1,0,0,0,1076,1077,1,0,0,0,
        1077,127,1,0,0,0,1078,1157,3,130,65,0,1079,1157,3,176,88,0,1080,
        1157,3,166,83,0,1081,1083,5,83,0,0,1082,1084,5,125,0,0,1083,1082,
        1,0,0,0,1083,1084,1,0,0,0,1084,1085,1,0,0,0,1085,1087,5,6,0,0,1086,
        1088,5,125,0,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,
        0,0,1089,1091,5,5,0,0,1090,1092,5,125,0,0,1091,1090,1,0,0,0,1091,
        1092,1,0,0,0,1092,1093,1,0,0,0,1093,1157,5,7,0,0,1094,1157,3,160,
        80,0,1095,1157,3,162,81,0,1096,1098,5,47,0,0,1097,1099,5,125,0,0,
        1098,1097,1,0,0,0,1098,1099,1,0,0,0,1099,1100,1,0,0,0,1100,1102,
        5,6,0,0,1101,1103,5,125,0,0,1102,1101,1,0,0,0,1102,1103,1,0,0,0,
        1103,1104,1,0,0,0,1104,1106,3,142,71,0,1105,1107,5,125,0,0,1106,
        1105,1,0,0,0,1106,1107,1,0,0,0,1107,1108,1,0,0,0,1108,1109,5,7,0,
        0,1109,1157,1,0,0,0,1110,1112,5,84,0,0,1111,1113,5,125,0,0,1112,
        1111,1,0,0,0,1112,1113,1,0,0,0,1113,1114,1,0,0,0,1114,1116,5,6,0,
        0,1115,1117,5,125,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,
        1,0,0,0,1118,1120,3,142,71,0,1119,1121,5,125,0,0,1120,1119,1,0,0,
        0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1123,5,7,0,0,1123,1157,
        1,0,0,0,1124,1126,5,85,0,0,1125,1127,5,125,0,0,1126,1125,1,0,0,0,
        1126,1127,1,0,0,0,1127,1128,1,0,0,0,1128,1130,5,6,0,0,1129,1131,
        5,125,0,0,1130,1129,1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,
        1132,1134,3,142,71,0,1133,1135,5,125,0,0,1134,1133,1,0,0,0,1134,
        1135,1,0,0,0,1135,1136,1,0,0,0,1136,1137,5,7,0,0,1137,1157,1,0,0,
        0,1138,1140,5,86,0,0,1139,1141,5,125,0,0,1140,1139,1,0,0,0,1140,
        1141,1,0,0,0,1141,1142,1,0,0,0,1142,1144,5,6,0,0,1143,1145,5,125,
        0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,1,0,0,0,1146,1148,
        3,142,71,0,1147,1149,5,125,0,0,1148,1147,1,0,0,0,1148,1149,1,0,0,
        0,1149,1150,1,0,0,0,1150,1151,5,7,0,0,1151,1157,1,0,0,0,1152,1157,
        3,140,70,0,1153,1157,3,138,69,0,1154,1157,3,146,73,0,1155,1157,3,
        170,85,0,1156,1078,1,0,0,0,1156,1079,1,0,0,0,1156,1080,1,0,0,0,1156,
        1081,1,0,0,0,1156,1094,1,0,0,0,1156,1095,1,0,0,0,1156,1096,1,0,0,
        0,1156,1110,1,0,0,0,1156,1124,1,0,0,0,1156,1138,1,0,0,0,1156,1152,
        1,0,0,0,1156,1153,1,0,0,0,1156,1154,1,0,0,0,1156,1155,1,0,0,0,1157,
        129,1,0,0,0,1158,1165,3,172,86,0,1159,1165,5,95,0,0,1160,1165,3,
        132,66,0,1161,1165,5,82,0,0,1162,1165,3,174,87,0,1163,1165,3,134,
        67,0,1164,1158,1,0,0,0,1164,1159,1,0,0,0,1164,1160,1,0,0,0,1164,
        1161,1,0,0,0,1164,1162,1,0,0,0,1164,1163,1,0,0,0,1165,131,1,0,0,
        0,1166,1167,7,2,0,0,1167,133,1,0,0,0,1168,1170,5,8,0,0,1169,1171,
        5,125,0,0,1170,1169,1,0,0,0,1170,1171,1,0,0,0,1171,1189,1,0,0,0,
        1172,1174,3,98,49,0,1173,1175,5,125,0,0,1174,1173,1,0,0,0,1174,1175,
        1,0,0,0,1175,1186,1,0,0,0,1176,1178,5,2,0,0,1177,1179,5,125,0,0,
        1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1182,
        3,98,49,0,1181,1183,5,125,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,
        0,1183,1185,1,0,0,0,1184,1176,1,0,0,0,1185,1188,1,0,0,0,1186,1184,
        1,0,0,0,1186,1187,1,0,0,0,1187,1190,1,0,0,0,1188,1186,1,0,0,0,1189,
        1172,1,0,0,0,1189,1190,1,0,0,0,1190,1191,1,0,0,0,1191,1192,5,9,0,
        0,1192,135,1,0,0,0,1193,1195,5,3,0,0,1194,1196,5,125,0,0,1195,1194,
        1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1224,3,110,55,0,
        1198,1200,5,18,0,0,1199,1201,5,125,0,0,1200,1199,1,0,0,0,1200,1201,
        1,0,0,0,1201,1202,1,0,0,0,1202,1224,3,110,55,0,1203,1205,5,19,0,
        0,1204,1206,5,125,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,
        1,0,0,0,1207,1224,3,110,55,0,1208,1210,5,20,0,0,1209,1211,5,125,
        0,0,1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,1224,
        3,110,55,0,1213,1215,5,21,0,0,1214,1216,5,125,0,0,1215,1214,1,0,
        0,0,1215,1216,1,0,0,0,1216,1217,1,0,0,0,1217,1224,3,110,55,0,1218,
        1220,5,22,0,0,1219,1221,5,125,0,0,1220,1219,1,0,0,0,1220,1221,1,
        0,0,0,1221,1222,1,0,0,0,1222,1224,3,110,55,0,1223,1193,1,0,0,0,1223,
        1198,1,0,0,0,1223,1203,1,0,0,0,1223,1208,1,0,0,0,1223,1213,1,0,0,
        0,1223,1218,1,0,0,0,1224,137,1,0,0,0,1225,1227,5,6,0,0,1226,1228,
        5,125,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,
        1229,1231,3,98,49,0,1230,1232,5,125,0,0,1231,1230,1,0,0,0,1231,1232,
        1,0,0,0,1232,1233,1,0,0,0,1233,1234,5,7,0,0,1234,139,1,0,0,0,1235,
        1240,3,76,38,0,1236,1238,5,125,0,0,1237,1236,1,0,0,0,1237,1238,1,
        0,0,0,1238,1239,1,0,0,0,1239,1241,3,78,39,0,1240,1237,1,0,0,0,1241,
        1242,1,0,0,0,1242,1240,1,0,0,0,1242,1243,1,0,0,0,1243,141,1,0,0,
        0,1244,1249,3,144,72,0,1245,1247,5,125,0,0,1246,1245,1,0,0,0,1246,
        1247,1,0,0,0,1247,1248,1,0,0,0,1248,1250,3,66,33,0,1249,1246,1,0,
        0,0,1249,1250,1,0,0,0,1250,143,1,0,0,0,1251,1252,3,170,85,0,1252,
        1253,5,125,0,0,1253,1254,5,77,0,0,1254,1255,5,125,0,0,1255,1256,
        3,98,49,0,1256,145,1,0,0,0,1257,1259,3,148,74,0,1258,1260,5,125,
        0,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,1261,1,0,0,0,1261,1263,
        5,6,0,0,1262,1264,5,125,0,0,1263,1262,1,0,0,0,1263,1264,1,0,0,0,
        1264,1269,1,0,0,0,1265,1267,5,63,0,0,1266,1268,5,125,0,0,1267,1266,
        1,0,0,0,1267,1268,1,0,0,0,1268,1270,1,0,0,0,1269,1265,1,0,0,0,1269,
        1270,1,0,0,0,1270,1288,1,0,0,0,1271,1273,3,98,49,0,1272,1274,5,125,
        0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,1285,1,0,0,0,1275,1277,
        5,2,0,0,1276,1278,5,125,0,0,1277,1276,1,0,0,0,1277,1278,1,0,0,0,
        1278,1279,1,0,0,0,1279,1281,3,98,49,0,1280,1282,5,125,0,0,1281,1280,
        1,0,0,0,1281,1282,1,0,0,0,1282,1284,1,0,0,0,1283,1275,1,0,0,0,1284,
        1287,1,0,0,0,1285,1283,1,0,0,0,1285,1286,1,0,0,0,1286,1289,1,0,0,
        0,1287,1285,1,0,0,0,1288,1271,1,0,0,0,1288,1289,1,0,0,0,1289,1290,
        1,0,0,0,1290,1291,5,7,0,0,1291,147,1,0,0,0,1292,1293,3,158,79,0,
        1293,1294,3,190,95,0,1294,1297,1,0,0,0,1295,1297,5,89,0,0,1296,1292,
        1,0,0,0,1296,1295,1,0,0,0,1297,149,1,0,0,0,1298,1300,3,156,78,0,
        1299,1301,5,125,0,0,1300,1299,1,0,0,0,1300,1301,1,0,0,0,1301,1302,
        1,0,0,0,1302,1304,5,6,0,0,1303,1305,5,125,0,0,1304,1303,1,0,0,0,
        1304,1305,1,0,0,0,1305,1323,1,0,0,0,1306,1308,3,98,49,0,1307,1309,
        5,125,0,0,1308,1307,1,0,0,0,1308,1309,1,0,0,0,1309,1320,1,0,0,0,
        1310,1312,5,2,0,0,1311,1313,5,125,0,0,1312,1311,1,0,0,0,1312,1313,
        1,0,0,0,1313,1314,1,0,0,0,1314,1316,3,98,49,0,1315,1317,5,125,0,
        0,1316,1315,1,0,0,0,1316,1317,1,0,0,0,1317,1319,1,0,0,0,1318,1310,
        1,0,0,0,1319,1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,1,0,0,0,1321,
        1324,1,0,0,0,1322,1320,1,0,0,0,1323,1306,1,0,0,0,1323,1324,1,0,0,
        0,1324,1325,1,0,0,0,1325,1326,5,7,0,0,1326,151,1,0,0,0,1327,1328,
        3,156,78,0,1328,153,1,0,0,0,1329,1330,3,190,95,0,1330,155,1,0,0,
        0,1331,1332,3,158,79,0,1332,1333,3,190,95,0,1333,157,1,0,0,0,1334,
        1335,3,190,95,0,1335,1336,5,23,0,0,1336,1338,1,0,0,0,1337,1334,1,
        0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,
        159,1,0,0,0,1341,1339,1,0,0,0,1342,1344,5,8,0,0,1343,1345,5,125,
        0,0,1344,1343,1,0,0,0,1344,1345,1,0,0,0,1345,1346,1,0,0,0,1346,1355,
        3,142,71,0,1347,1349,5,125,0,0,1348,1347,1,0,0,0,1348,1349,1,0,0,
        0,1349,1350,1,0,0,0,1350,1352,5,11,0,0,1351,1353,5,125,0,0,1352,
        1351,1,0,0,0,1352,1353,1,0,0,0,1353,1354,1,0,0,0,1354,1356,3,98,
        49,0,1355,1348,1,0,0,0,1355,1356,1,0,0,0,1356,1358,1,0,0,0,1357,
        1359,5,125,0,0,1358,1357,1,0,0,0,1358,1359,1,0,0,0,1359,1360,1,0,
        0,0,1360,1361,5,9,0,0,1361,161,1,0,0,0,1362,1364,5,8,0,0,1363,1365,
        5,125,0,0,1364,1363,1,0,0,0,1364,1365,1,0,0,0,1365,1374,1,0,0,0,
        1366,1368,3,170,85,0,1367,1369,5,125,0,0,1368,1367,1,0,0,0,1368,
        1369,1,0,0,0,1369,1370,1,0,0,0,1370,1372,5,3,0,0,1371,1373,5,125,
        0,0,1372,1371,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1366,
        1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1378,3,140,70,0,
        1377,1379,5,125,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,0,1379,1388,
        1,0,0,0,1380,1382,5,72,0,0,1381,1383,5,125,0,0,1382,1381,1,0,0,0,
        1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1386,3,98,49,0,1385,1387,
        5,125,0,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1389,1,0,0,0,
        1388,1380,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1392,
        5,11,0,0,1391,1393,5,125,0,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,
        1393,1394,1,0,0,0,1394,1396,3,98,49,0,1395,1397,5,125,0,0,1396,1395,
        1,0,0,0,1396,1397,1,0,0,0,1397,1398,1,0,0,0,1398,1399,5,9,0,0,1399,
        163,1,0,0,0,1400,1402,5,23,0,0,1401,1403,5,125,0,0,1402,1401,1,0,
        0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1405,3,180,90,0,1405,
        165,1,0,0,0,1406,1411,5,90,0,0,1407,1409,5,125,0,0,1408,1407,1,0,
        0,0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1412,3,168,84,0,1411,
        1408,1,0,0,0,1412,1413,1,0,0,0,1413,1411,1,0,0,0,1413,1414,1,0,0,
        0,1414,1429,1,0,0,0,1415,1417,5,90,0,0,1416,1418,5,125,0,0,1417,
        1416,1,0,0,0,1417,1418,1,0,0,0,1418,1419,1,0,0,0,1419,1424,3,98,
        49,0,1420,1422,5,125,0,0,1421,1420,1,0,0,0,1421,1422,1,0,0,0,1422,
        1423,1,0,0,0,1423,1425,3,168,84,0,1424,1421,1,0,0,0,1425,1426,1,
        0,0,0,1426,1424,1,0,0,0,1426,1427,1,0,0,0,1427,1429,1,0,0,0,1428,
        1406,1,0,0,0,1428,1415,1,0,0,0,1429,1438,1,0,0,0,1430,1432,5,125,
        0,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1435,
        5,91,0,0,1434,1436,5,125,0,0,1435,1434,1,0,0,0,1435,1436,1,0,0,0,
        1436,1437,1,0,0,0,1437,1439,3,98,49,0,1438,1431,1,0,0,0,1438,1439,
        1,0,0,0,1439,1441,1,0,0,0,1440,1442,5,125,0,0,1441,1440,1,0,0,0,
        1441,1442,1,0,0,0,1442,1443,1,0,0,0,1443,1444,5,92,0,0,1444,167,
        1,0,0,0,1445,1447,5,93,0,0,1446,1448,5,125,0,0,1447,1446,1,0,0,0,
        1447,1448,1,0,0,0,1448,1449,1,0,0,0,1449,1451,3,98,49,0,1450,1452,
        5,125,0,0,1451,1450,1,0,0,0,1451,1452,1,0,0,0,1452,1453,1,0,0,0,
        1453,1455,5,94,0,0,1454,1456,5,125,0,0,1455,1454,1,0,0,0,1455,1456,
        1,0,0,0,1456,1457,1,0,0,0,1457,1458,3,98,49,0,1458,169,1,0,0,0,1459,
        1460,3,190,95,0,1460,171,1,0,0,0,1461,1464,3,184,92,0,1462,1464,
        3,182,91,0,1463,1461,1,0,0,0,1463,1462,1,0,0,0,1464,173,1,0,0,0,
        1465,1467,5,24,0,0,1466,1468,5,125,0,0,1467,1466,1,0,0,0,1467,1468,
        1,0,0,0,1468,1502,1,0,0,0,1469,1471,3,180,90,0,1470,1472,5,125,0,
        0,1471,1470,1,0,0,0,1471,1472,1,0,0,0,1472,1473,1,0,0,0,1473,1475,
        5,10,0,0,1474,1476,5,125,0,0,1475,1474,1,0,0,0,1475,1476,1,0,0,0,
        1476,1477,1,0,0,0,1477,1479,3,98,49,0,1478,1480,5,125,0,0,1479,1478,
        1,0,0,0,1479,1480,1,0,0,0,1480,1499,1,0,0,0,1481,1483,5,2,0,0,1482,
        1484,5,125,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,1485,1,0,
        0,0,1485,1487,3,180,90,0,1486,1488,5,125,0,0,1487,1486,1,0,0,0,1487,
        1488,1,0,0,0,1488,1489,1,0,0,0,1489,1491,5,10,0,0,1490,1492,5,125,
        0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1495,
        3,98,49,0,1494,1496,5,125,0,0,1495,1494,1,0,0,0,1495,1496,1,0,0,
        0,1496,1498,1,0,0,0,1497,1481,1,0,0,0,1498,1501,1,0,0,0,1499,1497,
        1,0,0,0,1499,1500,1,0,0,0,1500,1503,1,0,0,0,1501,1499,1,0,0,0,1502,
        1469,1,0,0,0,1502,1503,1,0,0,0,1503,1504,1,0,0,0,1504,1505,5,25,
        0,0,1505,175,1,0,0,0,1506,1509,5,26,0,0,1507,1510,3,190,95,0,1508,
        1510,5,98,0,0,1509,1507,1,0,0,0,1509,1508,1,0,0,0,1510,177,1,0,0,
        0,1511,1516,3,128,64,0,1512,1514,5,125,0,0,1513,1512,1,0,0,0,1513,
        1514,1,0,0,0,1514,1515,1,0,0,0,1515,1517,3,164,82,0,1516,1513,1,
        0,0,0,1517,1518,1,0,0,0,1518,1516,1,0,0,0,1518,1519,1,0,0,0,1519,
        179,1,0,0,0,1520,1521,3,186,93,0,1521,181,1,0,0,0,1522,1523,7,3,
        0,0,1523,183,1,0,0,0,1524,1525,7,4,0,0,1525,185,1,0,0,0,1526,1529,
        3,190,95,0,1527,1529,3,188,94,0,1528,1526,1,0,0,0,1528,1527,1,0,
        0,0,1529,187,1,0,0,0,1530,1531,7,5,0,0,1531,189,1,0,0,0,1532,1533,
        7,6,0,0,1533,191,1,0,0,0,1534,1535,7,7,0,0,1535,193,1,0,0,0,1536,
        1537,7,8,0,0,1537,195,1,0,0,0,1538,1539,7,9,0,0,1539,197,1,0,0,0,
        283,199,203,206,209,217,221,226,233,238,241,245,249,253,259,263,
        268,273,277,280,282,286,290,295,299,304,308,317,322,326,330,334,
        337,341,351,358,371,375,381,388,393,397,403,407,413,417,423,427,
        431,435,439,443,448,455,459,464,471,477,482,488,494,499,503,508,
        511,514,517,524,531,534,540,543,549,553,557,561,565,570,575,579,
        584,587,596,605,610,623,626,634,638,643,648,652,657,663,668,675,
        679,683,685,689,691,695,697,703,709,713,716,719,723,729,733,736,
        739,745,748,751,755,761,764,767,771,775,779,781,785,787,790,794,
        796,802,806,810,814,817,822,827,832,837,843,847,849,853,857,859,
        861,876,886,896,901,905,912,917,922,926,930,934,937,939,944,948,
        952,956,960,964,967,969,974,978,983,988,992,1001,1003,1009,1013,
        1020,1024,1028,1031,1043,1046,1060,1064,1069,1073,1076,1083,1087,
        1091,1098,1102,1106,1112,1116,1120,1126,1130,1134,1140,1144,1148,
        1156,1164,1170,1174,1178,1182,1186,1189,1195,1200,1205,1210,1215,
        1220,1223,1227,1231,1237,1242,1246,1249,1259,1263,1267,1269,1273,
        1277,1281,1285,1288,1296,1300,1304,1308,1312,1316,1320,1323,1339,
        1344,1348,1352,1355,1358,1364,1368,1372,1374,1378,1382,1386,1388,
        1392,1396,1402,1408,1413,1417,1421,1426,1428,1431,1435,1438,1441,
        1447,1451,1455,1463,1467,1471,1475,1479,1483,1487,1491,1495,1499,
        1502,1509,1513,1518,1528
    ]

class CypherParser ( Parser ):

    grammarFileName = "Cypher.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "','", "'='", "'+='", "'*'", "'('", 
                     "')'", "'['", "']'", "':'", "'|'", "'..'", "'+'", "'-'", 
                     "'/'", "'%'", "'^'", "'<>'", "'<'", "'>'", "'<='", 
                     "'>='", "'.'", "'{'", "'}'", "'$'", "'\\u27E8'", "'\\u3008'", 
                     "'\\uFE64'", "'\\uFF1C'", "'\\u27E9'", "'\\u3009'", 
                     "'\\uFE65'", "'\\uFF1E'", "'\\u00AD'", "'\\u2010'", 
                     "'\\u2011'", "'\\u2012'", "'\\u2013'", "'\\u2014'", 
                     "'\\u2015'", "'\\u2212'", "'\\uFE58'", "'\\uFE63'", 
                     "'\\uFF0D'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'0'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "UNION", "ALL", "OPTIONAL", 
                      "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", 
                      "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", 
                      "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", 
                      "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", 
                      "WHERE", "OR", "XOR", "AND", "NOT", "IN", "STARTS", 
                      "ENDS", "CONTAINS", "IS", "NULL", "COUNT", "ANY", 
                      "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", 
                      "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", 
                      "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", 
                      "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", 
                      "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", 
                      "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", 
                      "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", 
                      "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", 
                      "EscapedSymbolicName", "SP", "WHITESPACE", "Comment" ]

    RULE_oC_Cypher = 0
    RULE_oC_Statement = 1
    RULE_oC_Query = 2
    RULE_oC_RegularQuery = 3
    RULE_oC_Union = 4
    RULE_oC_SingleQuery = 5
    RULE_oC_SinglePartQuery = 6
    RULE_oC_MultiPartQuery = 7
    RULE_oC_UpdatingClause = 8
    RULE_oC_ReadingClause = 9
    RULE_oC_Match = 10
    RULE_oC_Unwind = 11
    RULE_oC_Merge = 12
    RULE_oC_MergeAction = 13
    RULE_oC_Create = 14
    RULE_oC_Set = 15
    RULE_oC_SetItem = 16
    RULE_oC_Delete = 17
    RULE_oC_Remove = 18
    RULE_oC_RemoveItem = 19
    RULE_oC_InQueryCall = 20
    RULE_oC_StandaloneCall = 21
    RULE_oC_YieldItems = 22
    RULE_oC_YieldItem = 23
    RULE_oC_With = 24
    RULE_oC_Return = 25
    RULE_oC_ProjectionBody = 26
    RULE_oC_ProjectionItems = 27
    RULE_oC_ProjectionItem = 28
    RULE_oC_Order = 29
    RULE_oC_Skip = 30
    RULE_oC_Limit = 31
    RULE_oC_SortItem = 32
    RULE_oC_Where = 33
    RULE_oC_Pattern = 34
    RULE_oC_PatternPart = 35
    RULE_oC_AnonymousPatternPart = 36
    RULE_oC_PatternElement = 37
    RULE_oC_NodePattern = 38
    RULE_oC_PatternElementChain = 39
    RULE_oC_RelationshipPattern = 40
    RULE_oC_RelationshipDetail = 41
    RULE_oC_Properties = 42
    RULE_oC_RelationshipTypes = 43
    RULE_oC_NodeLabels = 44
    RULE_oC_NodeLabel = 45
    RULE_oC_RangeLiteral = 46
    RULE_oC_LabelName = 47
    RULE_oC_RelTypeName = 48
    RULE_oC_Expression = 49
    RULE_oC_OrExpression = 50
    RULE_oC_XorExpression = 51
    RULE_oC_AndExpression = 52
    RULE_oC_NotExpression = 53
    RULE_oC_ComparisonExpression = 54
    RULE_oC_AddOrSubtractExpression = 55
    RULE_oC_MultiplyDivideModuloExpression = 56
    RULE_oC_PowerOfExpression = 57
    RULE_oC_UnaryAddOrSubtractExpression = 58
    RULE_oC_StringListNullOperatorExpression = 59
    RULE_oC_ListOperatorExpression = 60
    RULE_oC_StringOperatorExpression = 61
    RULE_oC_NullOperatorExpression = 62
    RULE_oC_PropertyOrLabelsExpression = 63
    RULE_oC_Atom = 64
    RULE_oC_Literal = 65
    RULE_oC_BooleanLiteral = 66
    RULE_oC_ListLiteral = 67
    RULE_oC_PartialComparisonExpression = 68
    RULE_oC_ParenthesizedExpression = 69
    RULE_oC_RelationshipsPattern = 70
    RULE_oC_FilterExpression = 71
    RULE_oC_IdInColl = 72
    RULE_oC_FunctionInvocation = 73
    RULE_oC_FunctionName = 74
    RULE_oC_ExplicitProcedureInvocation = 75
    RULE_oC_ImplicitProcedureInvocation = 76
    RULE_oC_ProcedureResultField = 77
    RULE_oC_ProcedureName = 78
    RULE_oC_Namespace = 79
    RULE_oC_ListComprehension = 80
    RULE_oC_PatternComprehension = 81
    RULE_oC_PropertyLookup = 82
    RULE_oC_CaseExpression = 83
    RULE_oC_CaseAlternatives = 84
    RULE_oC_Variable = 85
    RULE_oC_NumberLiteral = 86
    RULE_oC_MapLiteral = 87
    RULE_oC_Parameter = 88
    RULE_oC_PropertyExpression = 89
    RULE_oC_PropertyKeyName = 90
    RULE_oC_IntegerLiteral = 91
    RULE_oC_DoubleLiteral = 92
    RULE_oC_SchemaName = 93
    RULE_oC_ReservedWord = 94
    RULE_oC_SymbolicName = 95
    RULE_oC_LeftArrowHead = 96
    RULE_oC_RightArrowHead = 97
    RULE_oC_Dash = 98

    ruleNames =  [ "oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", 
                   "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", 
                   "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", 
                   "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", 
                   "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", 
                   "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", 
                   "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", 
                   "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", 
                   "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", 
                   "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", 
                   "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", 
                   "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", 
                   "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", 
                   "oC_RelTypeName", "oC_Expression", "oC_OrExpression", 
                   "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", 
                   "oC_ComparisonExpression", "oC_AddOrSubtractExpression", 
                   "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", 
                   "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", 
                   "oC_ListOperatorExpression", "oC_StringOperatorExpression", 
                   "oC_NullOperatorExpression", "oC_PropertyOrLabelsExpression", 
                   "oC_Atom", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", 
                   "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", 
                   "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", 
                   "oC_FunctionInvocation", "oC_FunctionName", "oC_ExplicitProcedureInvocation", 
                   "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", 
                   "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", 
                   "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", 
                   "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", 
                   "oC_MapLiteral", "oC_Parameter", "oC_PropertyExpression", 
                   "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", 
                   "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", 
                   "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    UNION=46
    ALL=47
    OPTIONAL=48
    MATCH=49
    UNWIND=50
    AS=51
    MERGE=52
    ON=53
    CREATE=54
    SET=55
    DETACH=56
    DELETE=57
    REMOVE=58
    CALL=59
    YIELD=60
    WITH=61
    RETURN=62
    DISTINCT=63
    ORDER=64
    BY=65
    L_SKIP=66
    LIMIT=67
    ASCENDING=68
    ASC=69
    DESCENDING=70
    DESC=71
    WHERE=72
    OR=73
    XOR=74
    AND=75
    NOT=76
    IN=77
    STARTS=78
    ENDS=79
    CONTAINS=80
    IS=81
    NULL=82
    COUNT=83
    ANY=84
    NONE=85
    SINGLE=86
    TRUE=87
    FALSE=88
    EXISTS=89
    CASE=90
    ELSE=91
    END=92
    WHEN=93
    THEN=94
    StringLiteral=95
    EscapedChar=96
    HexInteger=97
    DecimalInteger=98
    OctalInteger=99
    HexLetter=100
    HexDigit=101
    Digit=102
    NonZeroDigit=103
    NonZeroOctDigit=104
    OctDigit=105
    ZeroDigit=106
    ExponentDecimalReal=107
    RegularDecimalReal=108
    CONSTRAINT=109
    DO=110
    FOR=111
    REQUIRE=112
    UNIQUE=113
    MANDATORY=114
    SCALAR=115
    OF=116
    ADD=117
    DROP=118
    FILTER=119
    EXTRACT=120
    UnescapedSymbolicName=121
    IdentifierStart=122
    IdentifierPart=123
    EscapedSymbolicName=124
    SP=125
    WHITESPACE=126
    Comment=127

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OC_CypherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Statement(self):
            return self.getTypedRuleContext(CypherParser.OC_StatementContext,0)


        def EOF(self):
            return self.getToken(CypherParser.EOF, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Cypher

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Cypher" ):
                listener.enterOC_Cypher(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Cypher" ):
                listener.exitOC_Cypher(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Cypher" ):
                return visitor.visitOC_Cypher(self)
            else:
                return visitor.visitChildren(self)




    def oC_Cypher(self):

        localctx = CypherParser.OC_CypherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oC_Cypher)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 198
                self.match(CypherParser.SP)


            self.state = 201
            self.oC_Statement()
            self.state = 206
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 202
                    self.match(CypherParser.SP)


                self.state = 205
                self.match(CypherParser.T__0)


            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 208
                self.match(CypherParser.SP)


            self.state = 211
            self.match(CypherParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Query(self):
            return self.getTypedRuleContext(CypherParser.OC_QueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Statement" ):
                listener.enterOC_Statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Statement" ):
                listener.exitOC_Statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Statement" ):
                return visitor.visitOC_Statement(self)
            else:
                return visitor.visitChildren(self)




    def oC_Statement(self):

        localctx = CypherParser.OC_StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_oC_Statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.oC_Query()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RegularQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_RegularQueryContext,0)


        def oC_StandaloneCall(self):
            return self.getTypedRuleContext(CypherParser.OC_StandaloneCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Query

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Query" ):
                listener.enterOC_Query(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Query" ):
                listener.exitOC_Query(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Query" ):
                return visitor.visitOC_Query(self)
            else:
                return visitor.visitChildren(self)




    def oC_Query(self):

        localctx = CypherParser.OC_QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_oC_Query)
        try:
            self.state = 217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 215
                self.oC_RegularQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 216
                self.oC_StandaloneCall()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RegularQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def oC_Union(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RegularQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RegularQuery" ):
                listener.enterOC_RegularQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RegularQuery" ):
                listener.exitOC_RegularQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RegularQuery" ):
                return visitor.visitOC_RegularQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_RegularQuery(self):

        localctx = CypherParser.OC_RegularQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_oC_RegularQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.oC_SingleQuery()
            self.state = 226
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 221
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 220
                        self.match(CypherParser.SP)


                    self.state = 223
                    self.oC_Union() 
                self.state = 228
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_SingleQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SingleQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Union

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Union" ):
                listener.enterOC_Union(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Union" ):
                listener.exitOC_Union(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Union" ):
                return visitor.visitOC_Union(self)
            else:
                return visitor.visitChildren(self)




    def oC_Union(self):

        localctx = CypherParser.OC_UnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_oC_Union)
        self._la = 0 # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 229
                self.match(CypherParser.UNION)
                self.state = 230
                self.match(CypherParser.SP)
                self.state = 231
                self.match(CypherParser.ALL)
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 232
                    self.match(CypherParser.SP)


                self.state = 235
                self.oC_SingleQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 236
                self.match(CypherParser.UNION)
                self.state = 238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 237
                    self.match(CypherParser.SP)


                self.state = 240
                self.oC_SingleQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SingleQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_MultiPartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_MultiPartQueryContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SingleQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SingleQuery" ):
                listener.enterOC_SingleQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SingleQuery" ):
                listener.exitOC_SingleQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SingleQuery" ):
                return visitor.visitOC_SingleQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_SingleQuery(self):

        localctx = CypherParser.OC_SingleQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_oC_SingleQuery)
        try:
            self.state = 245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 243
                self.oC_SinglePartQuery()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 244
                self.oC_MultiPartQuery()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SinglePartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Return(self):
            return self.getTypedRuleContext(CypherParser.OC_ReturnContext,0)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SinglePartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SinglePartQuery" ):
                listener.enterOC_SinglePartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SinglePartQuery" ):
                listener.exitOC_SinglePartQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SinglePartQuery" ):
                return visitor.visitOC_SinglePartQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_SinglePartQuery(self):

        localctx = CypherParser.OC_SinglePartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_oC_SinglePartQuery)
        self._la = 0 # Token type
        try:
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 578431077140398080) != 0):
                    self.state = 247
                    self.oC_ReadingClause()
                    self.state = 249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 248
                        self.match(CypherParser.SP)


                    self.state = 255
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 256
                self.oC_Return()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 578431077140398080) != 0):
                    self.state = 257
                    self.oC_ReadingClause()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 258
                        self.match(CypherParser.SP)


                    self.state = 265
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 266
                self.oC_UpdatingClause()
                self.state = 273
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 268
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 267
                            self.match(CypherParser.SP)


                        self.state = 270
                        self.oC_UpdatingClause() 
                    self.state = 275
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

                self.state = 280
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 276
                        self.match(CypherParser.SP)


                    self.state = 279
                    self.oC_Return()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiPartQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SinglePartQuery(self):
            return self.getTypedRuleContext(CypherParser.OC_SinglePartQueryContext,0)


        def oC_With(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_WithContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_WithContext,i)


        def oC_ReadingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ReadingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ReadingClauseContext,i)


        def oC_UpdatingClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UpdatingClauseContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UpdatingClauseContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiPartQuery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiPartQuery" ):
                listener.enterOC_MultiPartQuery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiPartQuery" ):
                listener.exitOC_MultiPartQuery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MultiPartQuery" ):
                return visitor.visitOC_MultiPartQuery(self)
            else:
                return visitor.visitChildren(self)




    def oC_MultiPartQuery(self):

        localctx = CypherParser.OC_MultiPartQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_oC_MultiPartQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 306 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 290
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 578431077140398080) != 0):
                        self.state = 284
                        self.oC_ReadingClause()
                        self.state = 286
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 285
                            self.match(CypherParser.SP)


                        self.state = 292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & 562949953421312000) != 0):
                        self.state = 293
                        self.oC_UpdatingClause()
                        self.state = 295
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 294
                            self.match(CypherParser.SP)


                        self.state = 301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 302
                    self.oC_With()
                    self.state = 304
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 303
                        self.match(CypherParser.SP)



                else:
                    raise NoViableAltException(self)
                self.state = 308 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

            self.state = 310
            self.oC_SinglePartQuery()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UpdatingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Create(self):
            return self.getTypedRuleContext(CypherParser.OC_CreateContext,0)


        def oC_Merge(self):
            return self.getTypedRuleContext(CypherParser.OC_MergeContext,0)


        def oC_Delete(self):
            return self.getTypedRuleContext(CypherParser.OC_DeleteContext,0)


        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def oC_Remove(self):
            return self.getTypedRuleContext(CypherParser.OC_RemoveContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_UpdatingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UpdatingClause" ):
                listener.enterOC_UpdatingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UpdatingClause" ):
                listener.exitOC_UpdatingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_UpdatingClause" ):
                return visitor.visitOC_UpdatingClause(self)
            else:
                return visitor.visitChildren(self)




    def oC_UpdatingClause(self):

        localctx = CypherParser.OC_UpdatingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_oC_UpdatingClause)
        try:
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 312
                self.oC_Create()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.oC_Merge()
                pass
            elif token in [56, 57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 314
                self.oC_Delete()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 315
                self.oC_Set()
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 5)
                self.state = 316
                self.oC_Remove()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReadingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Match(self):
            return self.getTypedRuleContext(CypherParser.OC_MatchContext,0)


        def oC_Unwind(self):
            return self.getTypedRuleContext(CypherParser.OC_UnwindContext,0)


        def oC_InQueryCall(self):
            return self.getTypedRuleContext(CypherParser.OC_InQueryCallContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReadingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReadingClause" ):
                listener.enterOC_ReadingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReadingClause" ):
                listener.exitOC_ReadingClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ReadingClause" ):
                return visitor.visitOC_ReadingClause(self)
            else:
                return visitor.visitChildren(self)




    def oC_ReadingClause(self):

        localctx = CypherParser.OC_ReadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_oC_ReadingClause)
        try:
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.oC_Match()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.oC_Unwind()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 3)
                self.state = 321
                self.oC_InQueryCall()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Match

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Match" ):
                listener.enterOC_Match(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Match" ):
                listener.exitOC_Match(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Match" ):
                return visitor.visitOC_Match(self)
            else:
                return visitor.visitChildren(self)




    def oC_Match(self):

        localctx = CypherParser.OC_MatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_oC_Match)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 324
                self.match(CypherParser.OPTIONAL)
                self.state = 325
                self.match(CypherParser.SP)


            self.state = 328
            self.match(CypherParser.MATCH)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 329
                self.match(CypherParser.SP)


            self.state = 332
            self.oC_Pattern()
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 333
                    self.match(CypherParser.SP)


                self.state = 336
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnwindContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Unwind

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Unwind" ):
                listener.enterOC_Unwind(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Unwind" ):
                listener.exitOC_Unwind(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Unwind" ):
                return visitor.visitOC_Unwind(self)
            else:
                return visitor.visitChildren(self)




    def oC_Unwind(self):

        localctx = CypherParser.OC_UnwindContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_oC_Unwind)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(CypherParser.UNWIND)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 340
                self.match(CypherParser.SP)


            self.state = 343
            self.oC_Expression()
            self.state = 344
            self.match(CypherParser.SP)
            self.state = 345
            self.match(CypherParser.AS)
            self.state = 346
            self.match(CypherParser.SP)
            self.state = 347
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def oC_PatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_MergeAction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MergeActionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MergeActionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Merge

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Merge" ):
                listener.enterOC_Merge(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Merge" ):
                listener.exitOC_Merge(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Merge" ):
                return visitor.visitOC_Merge(self)
            else:
                return visitor.visitChildren(self)




    def oC_Merge(self):

        localctx = CypherParser.OC_MergeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_oC_Merge)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 349
            self.match(CypherParser.MERGE)
            self.state = 351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 350
                self.match(CypherParser.SP)


            self.state = 353
            self.oC_PatternPart()
            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,34,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 354
                    self.match(CypherParser.SP)
                    self.state = 355
                    self.oC_MergeAction() 
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MergeActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def oC_Set(self):
            return self.getTypedRuleContext(CypherParser.OC_SetContext,0)


        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MergeAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MergeAction" ):
                listener.enterOC_MergeAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MergeAction" ):
                listener.exitOC_MergeAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MergeAction" ):
                return visitor.visitOC_MergeAction(self)
            else:
                return visitor.visitChildren(self)




    def oC_MergeAction(self):

        localctx = CypherParser.OC_MergeActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_oC_MergeAction)
        try:
            self.state = 371
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 361
                self.match(CypherParser.ON)
                self.state = 362
                self.match(CypherParser.SP)
                self.state = 363
                self.match(CypherParser.MATCH)
                self.state = 364
                self.match(CypherParser.SP)
                self.state = 365
                self.oC_Set()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 366
                self.match(CypherParser.ON)
                self.state = 367
                self.match(CypherParser.SP)
                self.state = 368
                self.match(CypherParser.CREATE)
                self.state = 369
                self.match(CypherParser.SP)
                self.state = 370
                self.oC_Set()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def oC_Pattern(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Create

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Create" ):
                listener.enterOC_Create(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Create" ):
                listener.exitOC_Create(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Create" ):
                return visitor.visitOC_Create(self)
            else:
                return visitor.visitChildren(self)




    def oC_Create(self):

        localctx = CypherParser.OC_CreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_oC_Create)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(CypherParser.CREATE)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 374
                self.match(CypherParser.SP)


            self.state = 377
            self.oC_Pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def oC_SetItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SetItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SetItemContext,i)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Set" ):
                listener.enterOC_Set(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Set" ):
                listener.exitOC_Set(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Set" ):
                return visitor.visitOC_Set(self)
            else:
                return visitor.visitChildren(self)




    def oC_Set(self):

        localctx = CypherParser.OC_SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_oC_Set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(CypherParser.SET)
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 380
                self.match(CypherParser.SP)


            self.state = 383
            self.oC_SetItem()
            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 384
                self.match(CypherParser.T__1)
                self.state = 385
                self.oC_SetItem()
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SetItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SetItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SetItem" ):
                listener.enterOC_SetItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SetItem" ):
                listener.exitOC_SetItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SetItem" ):
                return visitor.visitOC_SetItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_SetItem(self):

        localctx = CypherParser.OC_SetItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oC_SetItem)
        self._la = 0 # Token type
        try:
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.oC_PropertyExpression()
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 392
                    self.match(CypherParser.SP)


                self.state = 395
                self.match(CypherParser.T__2)
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 396
                    self.match(CypherParser.SP)


                self.state = 399
                self.oC_Expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 401
                self.oC_Variable()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 402
                    self.match(CypherParser.SP)


                self.state = 405
                self.match(CypherParser.T__2)
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 406
                    self.match(CypherParser.SP)


                self.state = 409
                self.oC_Expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.oC_Variable()
                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 412
                    self.match(CypherParser.SP)


                self.state = 415
                self.match(CypherParser.T__3)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 416
                    self.match(CypherParser.SP)


                self.state = 419
                self.oC_Expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 421
                self.oC_Variable()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 422
                    self.match(CypherParser.SP)


                self.state = 425
                self.oC_NodeLabels()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Delete

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Delete" ):
                listener.enterOC_Delete(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Delete" ):
                listener.exitOC_Delete(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Delete" ):
                return visitor.visitOC_Delete(self)
            else:
                return visitor.visitChildren(self)




    def oC_Delete(self):

        localctx = CypherParser.OC_DeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_oC_Delete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 429
                self.match(CypherParser.DETACH)
                self.state = 430
                self.match(CypherParser.SP)


            self.state = 433
            self.match(CypherParser.DELETE)
            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 434
                self.match(CypherParser.SP)


            self.state = 437
            self.oC_Expression()
            self.state = 448
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 438
                        self.match(CypherParser.SP)


                    self.state = 441
                    self.match(CypherParser.T__1)
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 442
                        self.match(CypherParser.SP)


                    self.state = 445
                    self.oC_Expression() 
                self.state = 450
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RemoveItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RemoveItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RemoveItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Remove" ):
                listener.enterOC_Remove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Remove" ):
                listener.exitOC_Remove(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Remove" ):
                return visitor.visitOC_Remove(self)
            else:
                return visitor.visitChildren(self)




    def oC_Remove(self):

        localctx = CypherParser.OC_RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_oC_Remove)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(CypherParser.REMOVE)
            self.state = 452
            self.match(CypherParser.SP)
            self.state = 453
            self.oC_RemoveItem()
            self.state = 464
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 454
                        self.match(CypherParser.SP)


                    self.state = 457
                    self.match(CypherParser.T__1)
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 458
                        self.match(CypherParser.SP)


                    self.state = 461
                    self.oC_RemoveItem() 
                self.state = 466
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RemoveItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_PropertyExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RemoveItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RemoveItem" ):
                listener.enterOC_RemoveItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RemoveItem" ):
                listener.exitOC_RemoveItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RemoveItem" ):
                return visitor.visitOC_RemoveItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_RemoveItem(self):

        localctx = CypherParser.OC_RemoveItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_oC_RemoveItem)
        try:
            self.state = 471
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 467
                self.oC_Variable()
                self.state = 468
                self.oC_NodeLabels()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 470
                self.oC_PropertyExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_InQueryCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_InQueryCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_InQueryCall" ):
                listener.enterOC_InQueryCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_InQueryCall" ):
                listener.exitOC_InQueryCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_InQueryCall" ):
                return visitor.visitOC_InQueryCall(self)
            else:
                return visitor.visitChildren(self)




    def oC_InQueryCall(self):

        localctx = CypherParser.OC_InQueryCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_oC_InQueryCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 473
            self.match(CypherParser.CALL)
            self.state = 474
            self.match(CypherParser.SP)
            self.state = 475
            self.oC_ExplicitProcedureInvocation()
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 476
                    self.match(CypherParser.SP)


                self.state = 479
                self.match(CypherParser.YIELD)
                self.state = 480
                self.match(CypherParser.SP)
                self.state = 481
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StandaloneCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(CypherParser.CALL, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ExplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ExplicitProcedureInvocationContext,0)


        def oC_ImplicitProcedureInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_ImplicitProcedureInvocationContext,0)


        def YIELD(self):
            return self.getToken(CypherParser.YIELD, 0)

        def oC_YieldItems(self):
            return self.getTypedRuleContext(CypherParser.OC_YieldItemsContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StandaloneCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StandaloneCall" ):
                listener.enterOC_StandaloneCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StandaloneCall" ):
                listener.exitOC_StandaloneCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_StandaloneCall" ):
                return visitor.visitOC_StandaloneCall(self)
            else:
                return visitor.visitChildren(self)




    def oC_StandaloneCall(self):

        localctx = CypherParser.OC_StandaloneCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oC_StandaloneCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(CypherParser.CALL)
            self.state = 485
            self.match(CypherParser.SP)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 486
                self.oC_ExplicitProcedureInvocation()
                pass

            elif la_ == 2:
                self.state = 487
                self.oC_ImplicitProcedureInvocation()
                pass


            self.state = 494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 490
                self.match(CypherParser.SP)
                self.state = 491
                self.match(CypherParser.YIELD)
                self.state = 492
                self.match(CypherParser.SP)
                self.state = 493
                self.oC_YieldItems()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def oC_YieldItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_YieldItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_YieldItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItems" ):
                listener.enterOC_YieldItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItems" ):
                listener.exitOC_YieldItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_YieldItems" ):
                return visitor.visitOC_YieldItems(self)
            else:
                return visitor.visitChildren(self)




    def oC_YieldItems(self):

        localctx = CypherParser.OC_YieldItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_oC_YieldItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.state = 496
                self.match(CypherParser.T__4)
                pass
            elif token in [83, 84, 85, 86, 100, 119, 120, 121, 124]:
                self.state = 497
                self.oC_YieldItem()
                self.state = 508
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 499
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 498
                            self.match(CypherParser.SP)


                        self.state = 501
                        self.match(CypherParser.T__1)
                        self.state = 503
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 502
                            self.match(CypherParser.SP)


                        self.state = 505
                        self.oC_YieldItem() 
                    self.state = 510
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 513
                    self.match(CypherParser.SP)


                self.state = 516
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_YieldItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_ProcedureResultField(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureResultFieldContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_YieldItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_YieldItem" ):
                listener.enterOC_YieldItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_YieldItem" ):
                listener.exitOC_YieldItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_YieldItem" ):
                return visitor.visitOC_YieldItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_YieldItem(self):

        localctx = CypherParser.OC_YieldItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_oC_YieldItem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 519
                self.oC_ProcedureResultField()
                self.state = 520
                self.match(CypherParser.SP)
                self.state = 521
                self.match(CypherParser.AS)
                self.state = 522
                self.match(CypherParser.SP)


            self.state = 526
            self.oC_Variable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_With

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_With" ):
                listener.enterOC_With(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_With" ):
                listener.exitOC_With(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_With" ):
                return visitor.visitOC_With(self)
            else:
                return visitor.visitChildren(self)




    def oC_With(self):

        localctx = CypherParser.OC_WithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_oC_With)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(CypherParser.WITH)
            self.state = 529
            self.oC_ProjectionBody()
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 530
                    self.match(CypherParser.SP)


                self.state = 533
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReturnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def oC_ProjectionBody(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionBodyContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Return

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Return" ):
                listener.enterOC_Return(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Return" ):
                listener.exitOC_Return(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Return" ):
                return visitor.visitOC_Return(self)
            else:
                return visitor.visitChildren(self)




    def oC_Return(self):

        localctx = CypherParser.OC_ReturnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_oC_Return)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(CypherParser.RETURN)
            self.state = 537
            self.oC_ProjectionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ProjectionItems(self):
            return self.getTypedRuleContext(CypherParser.OC_ProjectionItemsContext,0)


        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Order(self):
            return self.getTypedRuleContext(CypherParser.OC_OrderContext,0)


        def oC_Skip(self):
            return self.getTypedRuleContext(CypherParser.OC_SkipContext,0)


        def oC_Limit(self):
            return self.getTypedRuleContext(CypherParser.OC_LimitContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionBody" ):
                listener.enterOC_ProjectionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionBody" ):
                listener.exitOC_ProjectionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProjectionBody" ):
                return visitor.visitOC_ProjectionBody(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProjectionBody(self):

        localctx = CypherParser.OC_ProjectionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_oC_ProjectionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 539
                    self.match(CypherParser.SP)


                self.state = 542
                self.match(CypherParser.DISTINCT)


            self.state = 545
            self.match(CypherParser.SP)
            self.state = 546
            self.oC_ProjectionItems()
            self.state = 549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 547
                self.match(CypherParser.SP)
                self.state = 548
                self.oC_Order()


            self.state = 553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 551
                self.match(CypherParser.SP)
                self.state = 552
                self.oC_Skip()


            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 555
                self.match(CypherParser.SP)
                self.state = 556
                self.oC_Limit()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProjectionItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ProjectionItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ProjectionItemContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItems" ):
                listener.enterOC_ProjectionItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItems" ):
                listener.exitOC_ProjectionItems(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProjectionItems" ):
                return visitor.visitOC_ProjectionItems(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProjectionItems(self):

        localctx = CypherParser.OC_ProjectionItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_oC_ProjectionItems)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 559
                self.match(CypherParser.T__4)
                self.state = 570
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 561
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 560
                            self.match(CypherParser.SP)


                        self.state = 563
                        self.match(CypherParser.T__1)
                        self.state = 565
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 564
                            self.match(CypherParser.SP)


                        self.state = 567
                        self.oC_ProjectionItem() 
                    self.state = 572
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                pass
            elif token in [6, 8, 13, 14, 24, 26, 47, 76, 82, 83, 84, 85, 86, 87, 88, 89, 90, 95, 97, 98, 99, 100, 107, 108, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.oC_ProjectionItem()
                self.state = 584
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,79,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 575
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 574
                            self.match(CypherParser.SP)


                        self.state = 577
                        self.match(CypherParser.T__1)
                        self.state = 579
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 578
                            self.match(CypherParser.SP)


                        self.state = 581
                        self.oC_ProjectionItem() 
                    self.state = 586
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,79,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProjectionItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProjectionItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProjectionItem" ):
                listener.enterOC_ProjectionItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProjectionItem" ):
                listener.exitOC_ProjectionItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProjectionItem" ):
                return visitor.visitOC_ProjectionItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProjectionItem(self):

        localctx = CypherParser.OC_ProjectionItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_oC_ProjectionItem)
        try:
            self.state = 596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 589
                self.oC_Expression()
                self.state = 590
                self.match(CypherParser.SP)
                self.state = 591
                self.match(CypherParser.AS)
                self.state = 592
                self.match(CypherParser.SP)
                self.state = 593
                self.oC_Variable()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 595
                self.oC_Expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def oC_SortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SortItemContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SortItemContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Order

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Order" ):
                listener.enterOC_Order(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Order" ):
                listener.exitOC_Order(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Order" ):
                return visitor.visitOC_Order(self)
            else:
                return visitor.visitChildren(self)




    def oC_Order(self):

        localctx = CypherParser.OC_OrderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_oC_Order)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(CypherParser.ORDER)
            self.state = 599
            self.match(CypherParser.SP)
            self.state = 600
            self.match(CypherParser.BY)
            self.state = 601
            self.match(CypherParser.SP)
            self.state = 602
            self.oC_SortItem()
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 603
                self.match(CypherParser.T__1)
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 604
                    self.match(CypherParser.SP)


                self.state = 607
                self.oC_SortItem()
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SkipContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Skip

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Skip" ):
                listener.enterOC_Skip(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Skip" ):
                listener.exitOC_Skip(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Skip" ):
                return visitor.visitOC_Skip(self)
            else:
                return visitor.visitChildren(self)




    def oC_Skip(self):

        localctx = CypherParser.OC_SkipContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_oC_Skip)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(CypherParser.L_SKIP)
            self.state = 614
            self.match(CypherParser.SP)
            self.state = 615
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LimitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Limit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Limit" ):
                listener.enterOC_Limit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Limit" ):
                listener.exitOC_Limit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Limit" ):
                return visitor.visitOC_Limit(self)
            else:
                return visitor.visitChildren(self)




    def oC_Limit(self):

        localctx = CypherParser.OC_LimitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_oC_Limit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(CypherParser.LIMIT)
            self.state = 618
            self.match(CypherParser.SP)
            self.state = 619
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SortItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SortItem" ):
                listener.enterOC_SortItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SortItem" ):
                listener.exitOC_SortItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SortItem" ):
                return visitor.visitOC_SortItem(self)
            else:
                return visitor.visitChildren(self)




    def oC_SortItem(self):

        localctx = CypherParser.OC_SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_oC_SortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.oC_Expression()
            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 622
                    self.match(CypherParser.SP)


                self.state = 625
                _la = self._input.LA(1)
                if not(((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 15) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_WhereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Where

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Where" ):
                listener.enterOC_Where(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Where" ):
                listener.exitOC_Where(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Where" ):
                return visitor.visitOC_Where(self)
            else:
                return visitor.visitChildren(self)




    def oC_Where(self):

        localctx = CypherParser.OC_WhereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_oC_Where)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(CypherParser.WHERE)
            self.state = 629
            self.match(CypherParser.SP)
            self.state = 630
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternPartContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternPartContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Pattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Pattern" ):
                listener.enterOC_Pattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Pattern" ):
                listener.exitOC_Pattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Pattern" ):
                return visitor.visitOC_Pattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_Pattern(self):

        localctx = CypherParser.OC_PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_oC_Pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.oC_PatternPart()
            self.state = 643
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 633
                        self.match(CypherParser.SP)


                    self.state = 636
                    self.match(CypherParser.T__1)
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 637
                        self.match(CypherParser.SP)


                    self.state = 640
                    self.oC_PatternPart() 
                self.state = 645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_AnonymousPatternPart(self):
            return self.getTypedRuleContext(CypherParser.OC_AnonymousPatternPartContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternPart" ):
                listener.enterOC_PatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternPart" ):
                listener.exitOC_PatternPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternPart" ):
                return visitor.visitOC_PatternPart(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternPart(self):

        localctx = CypherParser.OC_PatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_oC_PatternPart)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 84, 85, 86, 100, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.oC_Variable()
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 647
                    self.match(CypherParser.SP)


                self.state = 650
                self.match(CypherParser.T__2)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 651
                    self.match(CypherParser.SP)


                self.state = 654
                self.oC_AnonymousPatternPart()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.oC_AnonymousPatternPart()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AnonymousPatternPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_AnonymousPatternPart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AnonymousPatternPart" ):
                listener.enterOC_AnonymousPatternPart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AnonymousPatternPart" ):
                listener.exitOC_AnonymousPatternPart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_AnonymousPatternPart" ):
                return visitor.visitOC_AnonymousPatternPart(self)
            else:
                return visitor.visitChildren(self)




    def oC_AnonymousPatternPart(self):

        localctx = CypherParser.OC_AnonymousPatternPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_oC_AnonymousPatternPart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.oC_PatternElement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PatternElement(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternElementContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElement" ):
                listener.enterOC_PatternElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElement" ):
                listener.exitOC_PatternElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternElement" ):
                return visitor.visitOC_PatternElement(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternElement(self):

        localctx = CypherParser.OC_PatternElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_oC_PatternElement)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self.oC_NodePattern()
                self.state = 668
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 663
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 662
                            self.match(CypherParser.SP)


                        self.state = 665
                        self.oC_PatternElementChain() 
                    self.state = 670
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.match(CypherParser.T__5)
                self.state = 672
                self.oC_PatternElement()
                self.state = 673
                self.match(CypherParser.T__6)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodePattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodePattern" ):
                listener.enterOC_NodePattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodePattern" ):
                listener.exitOC_NodePattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NodePattern" ):
                return visitor.visitOC_NodePattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_NodePattern(self):

        localctx = CypherParser.OC_NodePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_oC_NodePattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(CypherParser.T__5)
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 678
                self.match(CypherParser.SP)


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059723791) != 0):
                self.state = 681
                self.oC_Variable()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 682
                    self.match(CypherParser.SP)




            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 687
                self.oC_NodeLabels()
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 688
                    self.match(CypherParser.SP)




            self.state = 697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or _la==26:
                self.state = 693
                self.oC_Properties()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 694
                    self.match(CypherParser.SP)




            self.state = 699
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternElementChainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipPatternContext,0)


        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternElementChain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternElementChain" ):
                listener.enterOC_PatternElementChain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternElementChain" ):
                listener.exitOC_PatternElementChain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternElementChain" ):
                return visitor.visitOC_PatternElementChain(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternElementChain(self):

        localctx = CypherParser.OC_PatternElementChainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_oC_PatternElementChain)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self.oC_RelationshipPattern()
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 702
                self.match(CypherParser.SP)


            self.state = 705
            self.oC_NodePattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LeftArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_LeftArrowHeadContext,0)


        def oC_Dash(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_DashContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_DashContext,i)


        def oC_RightArrowHead(self):
            return self.getTypedRuleContext(CypherParser.OC_RightArrowHeadContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_RelationshipDetail(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipDetailContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipPattern" ):
                listener.enterOC_RelationshipPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipPattern" ):
                listener.exitOC_RelationshipPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipPattern" ):
                return visitor.visitOC_RelationshipPattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipPattern(self):

        localctx = CypherParser.OC_RelationshipPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_oC_RelationshipPattern)
        self._la = 0 # Token type
        try:
            self.state = 771
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 707
                self.oC_LeftArrowHead()
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 708
                    self.match(CypherParser.SP)


                self.state = 711
                self.oC_Dash()
                self.state = 713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 712
                    self.match(CypherParser.SP)


                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 715
                    self.oC_RelationshipDetail()


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 718
                    self.match(CypherParser.SP)


                self.state = 721
                self.oC_Dash()
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 722
                    self.match(CypherParser.SP)


                self.state = 725
                self.oC_RightArrowHead()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 727
                self.oC_LeftArrowHead()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 728
                    self.match(CypherParser.SP)


                self.state = 731
                self.oC_Dash()
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.match(CypherParser.SP)


                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 735
                    self.oC_RelationshipDetail()


                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 738
                    self.match(CypherParser.SP)


                self.state = 741
                self.oC_Dash()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.oC_Dash()
                self.state = 745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 744
                    self.match(CypherParser.SP)


                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 747
                    self.oC_RelationshipDetail()


                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 750
                    self.match(CypherParser.SP)


                self.state = 753
                self.oC_Dash()
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 754
                    self.match(CypherParser.SP)


                self.state = 757
                self.oC_RightArrowHead()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 759
                self.oC_Dash()
                self.state = 761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 760
                    self.match(CypherParser.SP)


                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==8:
                    self.state = 763
                    self.oC_RelationshipDetail()


                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 766
                    self.match(CypherParser.SP)


                self.state = 769
                self.oC_Dash()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipDetailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def oC_RelationshipTypes(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipTypesContext,0)


        def oC_RangeLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_RangeLiteralContext,0)


        def oC_Properties(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertiesContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipDetail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipDetail" ):
                listener.enterOC_RelationshipDetail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipDetail" ):
                listener.exitOC_RelationshipDetail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipDetail" ):
                return visitor.visitOC_RelationshipDetail(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipDetail(self):

        localctx = CypherParser.OC_RelationshipDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_oC_RelationshipDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(CypherParser.T__7)
            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 774
                self.match(CypherParser.SP)


            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059723791) != 0):
                self.state = 777
                self.oC_Variable()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 778
                    self.match(CypherParser.SP)




            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 783
                self.oC_RelationshipTypes()
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 784
                    self.match(CypherParser.SP)




            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 789
                self.oC_RangeLiteral()


            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24 or _la==26:
                self.state = 792
                self.oC_Properties()
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 793
                    self.match(CypherParser.SP)




            self.state = 798
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Properties

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Properties" ):
                listener.enterOC_Properties(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Properties" ):
                listener.exitOC_Properties(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Properties" ):
                return visitor.visitOC_Properties(self)
            else:
                return visitor.visitChildren(self)




    def oC_Properties(self):

        localctx = CypherParser.OC_PropertiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_oC_Properties)
        try:
            self.state = 802
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [24]:
                self.enterOuterAlt(localctx, 1)
                self.state = 800
                self.oC_MapLiteral()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.oC_Parameter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelTypeName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_RelTypeNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_RelTypeNameContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipTypes" ):
                listener.enterOC_RelationshipTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipTypes" ):
                listener.exitOC_RelationshipTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipTypes" ):
                return visitor.visitOC_RelationshipTypes(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipTypes(self):

        localctx = CypherParser.OC_RelationshipTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_oC_RelationshipTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 804
            self.match(CypherParser.T__9)
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 805
                self.match(CypherParser.SP)


            self.state = 808
            self.oC_RelTypeName()
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,133,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 810
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 809
                        self.match(CypherParser.SP)


                    self.state = 812
                    self.match(CypherParser.T__10)
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==10:
                        self.state = 813
                        self.match(CypherParser.T__9)


                    self.state = 817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 816
                        self.match(CypherParser.SP)


                    self.state = 819
                    self.oC_RelTypeName() 
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodeLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NodeLabelContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NodeLabelContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabels

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabels" ):
                listener.enterOC_NodeLabels(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabels" ):
                listener.exitOC_NodeLabels(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NodeLabels" ):
                return visitor.visitOC_NodeLabels(self)
            else:
                return visitor.visitChildren(self)




    def oC_NodeLabels(self):

        localctx = CypherParser.OC_NodeLabelsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_oC_NodeLabels)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.oC_NodeLabel()
            self.state = 832
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 827
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 826
                        self.match(CypherParser.SP)


                    self.state = 829
                    self.oC_NodeLabel() 
                self.state = 834
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NodeLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_LabelName(self):
            return self.getTypedRuleContext(CypherParser.OC_LabelNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NodeLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NodeLabel" ):
                listener.enterOC_NodeLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NodeLabel" ):
                listener.exitOC_NodeLabel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NodeLabel" ):
                return visitor.visitOC_NodeLabel(self)
            else:
                return visitor.visitChildren(self)




    def oC_NodeLabel(self):

        localctx = CypherParser.OC_NodeLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_oC_NodeLabel)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(CypherParser.T__9)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 836
                self.match(CypherParser.SP)


            self.state = 839
            self.oC_LabelName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RangeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_IntegerLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RangeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RangeLiteral" ):
                listener.enterOC_RangeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RangeLiteral" ):
                listener.exitOC_RangeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RangeLiteral" ):
                return visitor.visitOC_RangeLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_RangeLiteral(self):

        localctx = CypherParser.OC_RangeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_oC_RangeLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(CypherParser.T__4)
            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 842
                self.match(CypherParser.SP)


            self.state = 849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 7) != 0):
                self.state = 845
                self.oC_IntegerLiteral()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 846
                    self.match(CypherParser.SP)




            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 851
                self.match(CypherParser.T__11)
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 852
                    self.match(CypherParser.SP)


                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 7) != 0):
                    self.state = 855
                    self.oC_IntegerLiteral()
                    self.state = 857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 856
                        self.match(CypherParser.SP)






        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LabelNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LabelName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LabelName" ):
                listener.enterOC_LabelName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LabelName" ):
                listener.exitOC_LabelName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_LabelName" ):
                return visitor.visitOC_LabelName(self)
            else:
                return visitor.visitChildren(self)




    def oC_LabelName(self):

        localctx = CypherParser.OC_LabelNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_oC_LabelName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelTypeName" ):
                listener.enterOC_RelTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelTypeName" ):
                listener.exitOC_RelTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelTypeName" ):
                return visitor.visitOC_RelTypeName(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelTypeName(self):

        localctx = CypherParser.OC_RelTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_oC_RelTypeName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_OrExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_OrExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Expression" ):
                listener.enterOC_Expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Expression" ):
                listener.exitOC_Expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Expression" ):
                return visitor.visitOC_Expression(self)
            else:
                return visitor.visitChildren(self)




    def oC_Expression(self):

        localctx = CypherParser.OC_ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_oC_Expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.oC_OrExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_OrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_XorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_XorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_XorExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.OR)
            else:
                return self.getToken(CypherParser.OR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_OrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_OrExpression" ):
                listener.enterOC_OrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_OrExpression" ):
                listener.exitOC_OrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_OrExpression" ):
                return visitor.visitOC_OrExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_OrExpression(self):

        localctx = CypherParser.OC_OrExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_oC_OrExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.oC_XorExpression()
            self.state = 876
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,144,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.match(CypherParser.SP)
                    self.state = 871
                    self.match(CypherParser.OR)
                    self.state = 872
                    self.match(CypherParser.SP)
                    self.state = 873
                    self.oC_XorExpression() 
                self.state = 878
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,144,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_XorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AndExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_AndExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_AndExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.XOR)
            else:
                return self.getToken(CypherParser.XOR, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_XorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_XorExpression" ):
                listener.enterOC_XorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_XorExpression" ):
                listener.exitOC_XorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_XorExpression" ):
                return visitor.visitOC_XorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_XorExpression(self):

        localctx = CypherParser.OC_XorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_oC_XorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.oC_AndExpression()
            self.state = 886
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 880
                    self.match(CypherParser.SP)
                    self.state = 881
                    self.match(CypherParser.XOR)
                    self.state = 882
                    self.match(CypherParser.SP)
                    self.state = 883
                    self.oC_AndExpression() 
                self.state = 888
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NotExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NotExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NotExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.AND)
            else:
                return self.getToken(CypherParser.AND, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AndExpression" ):
                listener.enterOC_AndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AndExpression" ):
                listener.exitOC_AndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_AndExpression" ):
                return visitor.visitOC_AndExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_AndExpression(self):

        localctx = CypherParser.OC_AndExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_oC_AndExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.oC_NotExpression()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 890
                    self.match(CypherParser.SP)
                    self.state = 891
                    self.match(CypherParser.AND)
                    self.state = 892
                    self.match(CypherParser.SP)
                    self.state = 893
                    self.oC_NotExpression() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NotExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ComparisonExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ComparisonExpressionContext,0)


        def NOT(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.NOT)
            else:
                return self.getToken(CypherParser.NOT, i)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NotExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NotExpression" ):
                listener.enterOC_NotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NotExpression" ):
                listener.exitOC_NotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NotExpression" ):
                return visitor.visitOC_NotExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_NotExpression(self):

        localctx = CypherParser.OC_NotExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_oC_NotExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==76:
                self.state = 899
                self.match(CypherParser.NOT)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 900
                    self.match(CypherParser.SP)


                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 908
            self.oC_ComparisonExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def oC_PartialComparisonExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PartialComparisonExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PartialComparisonExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ComparisonExpression" ):
                listener.enterOC_ComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ComparisonExpression" ):
                listener.exitOC_ComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ComparisonExpression" ):
                return visitor.visitOC_ComparisonExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_ComparisonExpression(self):

        localctx = CypherParser.OC_ComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_oC_ComparisonExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.oC_AddOrSubtractExpression()
            self.state = 917
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,150,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 911
                        self.match(CypherParser.SP)


                    self.state = 914
                    self.oC_PartialComparisonExpression() 
                self.state = 919
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,150,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_MultiplyDivideModuloExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_MultiplyDivideModuloExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_MultiplyDivideModuloExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_AddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_AddOrSubtractExpression" ):
                listener.enterOC_AddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_AddOrSubtractExpression" ):
                listener.exitOC_AddOrSubtractExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_AddOrSubtractExpression" ):
                return visitor.visitOC_AddOrSubtractExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_AddOrSubtractExpression(self):

        localctx = CypherParser.OC_AddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_oC_AddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.oC_MultiplyDivideModuloExpression()
            self.state = 939
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,156,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 937
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 922
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 921
                            self.match(CypherParser.SP)


                        self.state = 924
                        self.match(CypherParser.T__12)
                        self.state = 926
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 925
                            self.match(CypherParser.SP)


                        self.state = 928
                        self.oC_MultiplyDivideModuloExpression()
                        pass

                    elif la_ == 2:
                        self.state = 930
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 929
                            self.match(CypherParser.SP)


                        self.state = 932
                        self.match(CypherParser.T__13)
                        self.state = 934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 933
                            self.match(CypherParser.SP)


                        self.state = 936
                        self.oC_MultiplyDivideModuloExpression()
                        pass

             
                self.state = 941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,156,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MultiplyDivideModuloExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PowerOfExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PowerOfExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PowerOfExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_MultiplyDivideModuloExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MultiplyDivideModuloExpression" ):
                listener.enterOC_MultiplyDivideModuloExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MultiplyDivideModuloExpression" ):
                listener.exitOC_MultiplyDivideModuloExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MultiplyDivideModuloExpression" ):
                return visitor.visitOC_MultiplyDivideModuloExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_MultiplyDivideModuloExpression(self):

        localctx = CypherParser.OC_MultiplyDivideModuloExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_oC_MultiplyDivideModuloExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.oC_PowerOfExpression()
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,164,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 967
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                    if la_ == 1:
                        self.state = 944
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 943
                            self.match(CypherParser.SP)


                        self.state = 946
                        self.match(CypherParser.T__4)
                        self.state = 948
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 947
                            self.match(CypherParser.SP)


                        self.state = 950
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 2:
                        self.state = 952
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 951
                            self.match(CypherParser.SP)


                        self.state = 954
                        self.match(CypherParser.T__14)
                        self.state = 956
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 955
                            self.match(CypherParser.SP)


                        self.state = 958
                        self.oC_PowerOfExpression()
                        pass

                    elif la_ == 3:
                        self.state = 960
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 959
                            self.match(CypherParser.SP)


                        self.state = 962
                        self.match(CypherParser.T__15)
                        self.state = 964
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 963
                            self.match(CypherParser.SP)


                        self.state = 966
                        self.oC_PowerOfExpression()
                        pass

             
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,164,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PowerOfExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_UnaryAddOrSubtractExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_UnaryAddOrSubtractExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_UnaryAddOrSubtractExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PowerOfExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PowerOfExpression" ):
                listener.enterOC_PowerOfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PowerOfExpression" ):
                listener.exitOC_PowerOfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PowerOfExpression" ):
                return visitor.visitOC_PowerOfExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PowerOfExpression(self):

        localctx = CypherParser.OC_PowerOfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_oC_PowerOfExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.oC_UnaryAddOrSubtractExpression()
            self.state = 983
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 973
                        self.match(CypherParser.SP)


                    self.state = 976
                    self.match(CypherParser.T__16)
                    self.state = 978
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 977
                        self.match(CypherParser.SP)


                    self.state = 980
                    self.oC_UnaryAddOrSubtractExpression() 
                self.state = 985
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_UnaryAddOrSubtractExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_StringListNullOperatorExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_StringListNullOperatorExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_UnaryAddOrSubtractExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_UnaryAddOrSubtractExpression" ):
                listener.enterOC_UnaryAddOrSubtractExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_UnaryAddOrSubtractExpression" ):
                listener.exitOC_UnaryAddOrSubtractExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_UnaryAddOrSubtractExpression" ):
                return visitor.visitOC_UnaryAddOrSubtractExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_UnaryAddOrSubtractExpression(self):

        localctx = CypherParser.OC_UnaryAddOrSubtractExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oC_UnaryAddOrSubtractExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13 or _la==14:
                self.state = 986
                _la = self._input.LA(1)
                if not(_la==13 or _la==14):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 987
                    self.match(CypherParser.SP)


                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.oC_StringListNullOperatorExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringListNullOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_StringOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_StringOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_StringOperatorExpressionContext,i)


        def oC_ListOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ListOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ListOperatorExpressionContext,i)


        def oC_NullOperatorExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_NullOperatorExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_NullOperatorExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringListNullOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringListNullOperatorExpression" ):
                listener.enterOC_StringListNullOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringListNullOperatorExpression" ):
                listener.exitOC_StringListNullOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_StringListNullOperatorExpression" ):
                return visitor.visitOC_StringListNullOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_StringListNullOperatorExpression(self):

        localctx = CypherParser.OC_StringListNullOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oC_StringListNullOperatorExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 997
            self.oC_PropertyOrLabelsExpression()
            self.state = 1003
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1001
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                    if la_ == 1:
                        self.state = 998
                        self.oC_StringOperatorExpression()
                        pass

                    elif la_ == 2:
                        self.state = 999
                        self.oC_ListOperatorExpression()
                        pass

                    elif la_ == 3:
                        self.state = 1000
                        self.oC_NullOperatorExpression()
                        pass

             
                self.state = 1005
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListOperatorExpression" ):
                listener.enterOC_ListOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListOperatorExpression" ):
                listener.exitOC_ListOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ListOperatorExpression" ):
                return visitor.visitOC_ListOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_ListOperatorExpression(self):

        localctx = CypherParser.OC_ListOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oC_ListOperatorExpression)
        self._la = 0 # Token type
        try:
            self.state = 1031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1006
                self.match(CypherParser.SP)
                self.state = 1007
                self.match(CypherParser.IN)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1008
                    self.match(CypherParser.SP)


                self.state = 1011
                self.oC_PropertyOrLabelsExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1012
                    self.match(CypherParser.SP)


                self.state = 1015
                self.match(CypherParser.T__7)
                self.state = 1016
                self.oC_Expression()
                self.state = 1017
                self.match(CypherParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1019
                    self.match(CypherParser.SP)


                self.state = 1022
                self.match(CypherParser.T__7)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737572266304) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343054102331329) != 0):
                    self.state = 1023
                    self.oC_Expression()


                self.state = 1026
                self.match(CypherParser.T__11)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737572266304) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343054102331329) != 0):
                    self.state = 1027
                    self.oC_Expression()


                self.state = 1030
                self.match(CypherParser.T__8)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_StringOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyOrLabelsExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyOrLabelsExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_StringOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_StringOperatorExpression" ):
                listener.enterOC_StringOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_StringOperatorExpression" ):
                listener.exitOC_StringOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_StringOperatorExpression" ):
                return visitor.visitOC_StringOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_StringOperatorExpression(self):

        localctx = CypherParser.OC_StringOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oC_StringOperatorExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1033
                self.match(CypherParser.SP)
                self.state = 1034
                self.match(CypherParser.STARTS)
                self.state = 1035
                self.match(CypherParser.SP)
                self.state = 1036
                self.match(CypherParser.WITH)
                pass

            elif la_ == 2:
                self.state = 1037
                self.match(CypherParser.SP)
                self.state = 1038
                self.match(CypherParser.ENDS)
                self.state = 1039
                self.match(CypherParser.SP)
                self.state = 1040
                self.match(CypherParser.WITH)
                pass

            elif la_ == 3:
                self.state = 1041
                self.match(CypherParser.SP)
                self.state = 1042
                self.match(CypherParser.CONTAINS)
                pass


            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1045
                self.match(CypherParser.SP)


            self.state = 1048
            self.oC_PropertyOrLabelsExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NullOperatorExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_NullOperatorExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NullOperatorExpression" ):
                listener.enterOC_NullOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NullOperatorExpression" ):
                listener.exitOC_NullOperatorExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NullOperatorExpression" ):
                return visitor.visitOC_NullOperatorExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_NullOperatorExpression(self):

        localctx = CypherParser.OC_NullOperatorExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oC_NullOperatorExpression)
        try:
            self.state = 1060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.match(CypherParser.SP)
                self.state = 1051
                self.match(CypherParser.IS)
                self.state = 1052
                self.match(CypherParser.SP)
                self.state = 1053
                self.match(CypherParser.NULL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1054
                self.match(CypherParser.SP)
                self.state = 1055
                self.match(CypherParser.IS)
                self.state = 1056
                self.match(CypherParser.SP)
                self.state = 1057
                self.match(CypherParser.NOT)
                self.state = 1058
                self.match(CypherParser.SP)
                self.state = 1059
                self.match(CypherParser.NULL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyOrLabelsExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def oC_NodeLabels(self):
            return self.getTypedRuleContext(CypherParser.OC_NodeLabelsContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyOrLabelsExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyOrLabelsExpression" ):
                listener.enterOC_PropertyOrLabelsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyOrLabelsExpression" ):
                listener.exitOC_PropertyOrLabelsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyOrLabelsExpression" ):
                return visitor.visitOC_PropertyOrLabelsExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyOrLabelsExpression(self):

        localctx = CypherParser.OC_PropertyOrLabelsExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_oC_PropertyOrLabelsExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.oC_Atom()
            self.state = 1069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,182,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1064
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1063
                        self.match(CypherParser.SP)


                    self.state = 1066
                    self.oC_PropertyLookup() 
                self.state = 1071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

            self.state = 1076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1072
                    self.match(CypherParser.SP)


                self.state = 1075
                self.oC_NodeLabels()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Literal(self):
            return self.getTypedRuleContext(CypherParser.OC_LiteralContext,0)


        def oC_Parameter(self):
            return self.getTypedRuleContext(CypherParser.OC_ParameterContext,0)


        def oC_CaseExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_CaseExpressionContext,0)


        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_ListComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_ListComprehensionContext,0)


        def oC_PatternComprehension(self):
            return self.getTypedRuleContext(CypherParser.OC_PatternComprehensionContext,0)


        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_ParenthesizedExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_ParenthesizedExpressionContext,0)


        def oC_FunctionInvocation(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionInvocationContext,0)


        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Atom" ):
                listener.enterOC_Atom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Atom" ):
                listener.exitOC_Atom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Atom" ):
                return visitor.visitOC_Atom(self)
            else:
                return visitor.visitChildren(self)




    def oC_Atom(self):

        localctx = CypherParser.OC_AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_oC_Atom)
        self._la = 0 # Token type
        try:
            self.state = 1156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,200,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1078
                self.oC_Literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1079
                self.oC_Parameter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1080
                self.oC_CaseExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1081
                self.match(CypherParser.COUNT)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1082
                    self.match(CypherParser.SP)


                self.state = 1085
                self.match(CypherParser.T__5)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1086
                    self.match(CypherParser.SP)


                self.state = 1089
                self.match(CypherParser.T__4)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1090
                    self.match(CypherParser.SP)


                self.state = 1093
                self.match(CypherParser.T__6)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1094
                self.oC_ListComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1095
                self.oC_PatternComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1096
                self.match(CypherParser.ALL)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1097
                    self.match(CypherParser.SP)


                self.state = 1100
                self.match(CypherParser.T__5)
                self.state = 1102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1101
                    self.match(CypherParser.SP)


                self.state = 1104
                self.oC_FilterExpression()
                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1105
                    self.match(CypherParser.SP)


                self.state = 1108
                self.match(CypherParser.T__6)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1110
                self.match(CypherParser.ANY)
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1111
                    self.match(CypherParser.SP)


                self.state = 1114
                self.match(CypherParser.T__5)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1115
                    self.match(CypherParser.SP)


                self.state = 1118
                self.oC_FilterExpression()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1119
                    self.match(CypherParser.SP)


                self.state = 1122
                self.match(CypherParser.T__6)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1124
                self.match(CypherParser.NONE)
                self.state = 1126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1125
                    self.match(CypherParser.SP)


                self.state = 1128
                self.match(CypherParser.T__5)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1129
                    self.match(CypherParser.SP)


                self.state = 1132
                self.oC_FilterExpression()
                self.state = 1134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1133
                    self.match(CypherParser.SP)


                self.state = 1136
                self.match(CypherParser.T__6)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1138
                self.match(CypherParser.SINGLE)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1139
                    self.match(CypherParser.SP)


                self.state = 1142
                self.match(CypherParser.T__5)
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1143
                    self.match(CypherParser.SP)


                self.state = 1146
                self.oC_FilterExpression()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1147
                    self.match(CypherParser.SP)


                self.state = 1150
                self.match(CypherParser.T__6)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1152
                self.oC_RelationshipsPattern()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1153
                self.oC_ParenthesizedExpression()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1154
                self.oC_FunctionInvocation()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1155
                self.oC_Variable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NumberLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_NumberLiteralContext,0)


        def StringLiteral(self):
            return self.getToken(CypherParser.StringLiteral, 0)

        def oC_BooleanLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_BooleanLiteralContext,0)


        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def oC_MapLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_MapLiteralContext,0)


        def oC_ListLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_ListLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Literal" ):
                listener.enterOC_Literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Literal" ):
                listener.exitOC_Literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Literal" ):
                return visitor.visitOC_Literal(self)
            else:
                return visitor.visitChildren(self)




    def oC_Literal(self):

        localctx = CypherParser.OC_LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_oC_Literal)
        try:
            self.state = 1164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97, 98, 99, 107, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1158
                self.oC_NumberLiteral()
                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1159
                self.match(CypherParser.StringLiteral)
                pass
            elif token in [87, 88]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1160
                self.oC_BooleanLiteral()
                pass
            elif token in [82]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1161
                self.match(CypherParser.NULL)
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1162
                self.oC_MapLiteral()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1163
                self.oC_ListLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_BooleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_BooleanLiteral" ):
                listener.enterOC_BooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_BooleanLiteral" ):
                listener.exitOC_BooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_BooleanLiteral" ):
                return visitor.visitOC_BooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_BooleanLiteral(self):

        localctx = CypherParser.OC_BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_oC_BooleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            _la = self._input.LA(1)
            if not(_la==87 or _la==88):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListLiteral" ):
                listener.enterOC_ListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListLiteral" ):
                listener.exitOC_ListLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ListLiteral" ):
                return visitor.visitOC_ListLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_ListLiteral(self):

        localctx = CypherParser.OC_ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_oC_ListLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1168
            self.match(CypherParser.T__7)
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1169
                self.match(CypherParser.SP)


            self.state = 1189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737572266304) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343054102331329) != 0):
                self.state = 1172
                self.oC_Expression()
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1173
                    self.match(CypherParser.SP)


                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1176
                    self.match(CypherParser.T__1)
                    self.state = 1178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1177
                        self.match(CypherParser.SP)


                    self.state = 1180
                    self.oC_Expression()
                    self.state = 1182
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1181
                        self.match(CypherParser.SP)


                    self.state = 1188
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1191
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PartialComparisonExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_AddOrSubtractExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_AddOrSubtractExpressionContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PartialComparisonExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PartialComparisonExpression" ):
                listener.enterOC_PartialComparisonExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PartialComparisonExpression" ):
                listener.exitOC_PartialComparisonExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PartialComparisonExpression" ):
                return visitor.visitOC_PartialComparisonExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PartialComparisonExpression(self):

        localctx = CypherParser.OC_PartialComparisonExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_oC_PartialComparisonExpression)
        self._la = 0 # Token type
        try:
            self.state = 1223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1193
                self.match(CypherParser.T__2)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1194
                    self.match(CypherParser.SP)


                self.state = 1197
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1198
                self.match(CypherParser.T__17)
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1199
                    self.match(CypherParser.SP)


                self.state = 1202
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1203
                self.match(CypherParser.T__18)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1204
                    self.match(CypherParser.SP)


                self.state = 1207
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1208
                self.match(CypherParser.T__19)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1209
                    self.match(CypherParser.SP)


                self.state = 1212
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1213
                self.match(CypherParser.T__20)
                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1214
                    self.match(CypherParser.SP)


                self.state = 1217
                self.oC_AddOrSubtractExpression()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1218
                self.match(CypherParser.T__21)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1219
                    self.match(CypherParser.SP)


                self.state = 1222
                self.oC_AddOrSubtractExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParenthesizedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ParenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ParenthesizedExpression" ):
                listener.enterOC_ParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ParenthesizedExpression" ):
                listener.exitOC_ParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ParenthesizedExpression" ):
                return visitor.visitOC_ParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_ParenthesizedExpression(self):

        localctx = CypherParser.OC_ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_oC_ParenthesizedExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(CypherParser.T__5)
            self.state = 1227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1226
                self.match(CypherParser.SP)


            self.state = 1229
            self.oC_Expression()
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1230
                self.match(CypherParser.SP)


            self.state = 1233
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RelationshipsPatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_NodePattern(self):
            return self.getTypedRuleContext(CypherParser.OC_NodePatternContext,0)


        def oC_PatternElementChain(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PatternElementChainContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PatternElementChainContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_RelationshipsPattern

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RelationshipsPattern" ):
                listener.enterOC_RelationshipsPattern(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RelationshipsPattern" ):
                listener.exitOC_RelationshipsPattern(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RelationshipsPattern" ):
                return visitor.visitOC_RelationshipsPattern(self)
            else:
                return visitor.visitChildren(self)




    def oC_RelationshipsPattern(self):

        localctx = CypherParser.OC_RelationshipsPatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_oC_RelationshipsPattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.oC_NodePattern()
            self.state = 1240 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1237
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1236
                        self.match(CypherParser.SP)


                    self.state = 1239
                    self.oC_PatternElementChain()

                else:
                    raise NoViableAltException(self)
                self.state = 1242 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FilterExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_IdInColl(self):
            return self.getTypedRuleContext(CypherParser.OC_IdInCollContext,0)


        def oC_Where(self):
            return self.getTypedRuleContext(CypherParser.OC_WhereContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FilterExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FilterExpression" ):
                listener.enterOC_FilterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FilterExpression" ):
                listener.exitOC_FilterExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_FilterExpression" ):
                return visitor.visitOC_FilterExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_FilterExpression(self):

        localctx = CypherParser.OC_FilterExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_oC_FilterExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1244
            self.oC_IdInColl()
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
            if la_ == 1:
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1245
                    self.match(CypherParser.SP)


                self.state = 1248
                self.oC_Where()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IdInCollContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_IdInColl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IdInColl" ):
                listener.enterOC_IdInColl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IdInColl" ):
                listener.exitOC_IdInColl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_IdInColl" ):
                return visitor.visitOC_IdInColl(self)
            else:
                return visitor.visitChildren(self)




    def oC_IdInColl(self):

        localctx = CypherParser.OC_IdInCollContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_oC_IdInColl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1251
            self.oC_Variable()
            self.state = 1252
            self.match(CypherParser.SP)
            self.state = 1253
            self.match(CypherParser.IN)
            self.state = 1254
            self.match(CypherParser.SP)
            self.state = 1255
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FunctionName(self):
            return self.getTypedRuleContext(CypherParser.OC_FunctionNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionInvocation" ):
                listener.enterOC_FunctionInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionInvocation" ):
                listener.exitOC_FunctionInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_FunctionInvocation" ):
                return visitor.visitOC_FunctionInvocation(self)
            else:
                return visitor.visitChildren(self)




    def oC_FunctionInvocation(self):

        localctx = CypherParser.OC_FunctionInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_oC_FunctionInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1257
            self.oC_FunctionName()
            self.state = 1259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1258
                self.match(CypherParser.SP)


            self.state = 1261
            self.match(CypherParser.T__5)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1262
                self.match(CypherParser.SP)


            self.state = 1269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 1265
                self.match(CypherParser.DISTINCT)
                self.state = 1267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1266
                    self.match(CypherParser.SP)




            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737572266304) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343054102331329) != 0):
                self.state = 1271
                self.oC_Expression()
                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1272
                    self.match(CypherParser.SP)


                self.state = 1285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1275
                    self.match(CypherParser.T__1)
                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1276
                        self.match(CypherParser.SP)


                    self.state = 1279
                    self.oC_Expression()
                    self.state = 1281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1280
                        self.match(CypherParser.SP)


                    self.state = 1287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1290
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_FunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_FunctionName" ):
                listener.enterOC_FunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_FunctionName" ):
                listener.exitOC_FunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_FunctionName" ):
                return visitor.visitOC_FunctionName(self)
            else:
                return visitor.visitChildren(self)




    def oC_FunctionName(self):

        localctx = CypherParser.OC_FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_oC_FunctionName)
        try:
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 84, 85, 86, 100, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1292
                self.oC_Namespace()
                self.state = 1293
                self.oC_SymbolicName()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.match(CypherParser.EXISTS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ExplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ExplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ExplicitProcedureInvocation" ):
                listener.enterOC_ExplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ExplicitProcedureInvocation" ):
                listener.exitOC_ExplicitProcedureInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ExplicitProcedureInvocation" ):
                return visitor.visitOC_ExplicitProcedureInvocation(self)
            else:
                return visitor.visitChildren(self)




    def oC_ExplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ExplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_oC_ExplicitProcedureInvocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.oC_ProcedureName()
            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1299
                self.match(CypherParser.SP)


            self.state = 1302
            self.match(CypherParser.T__5)
            self.state = 1304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1303
                self.match(CypherParser.SP)


            self.state = 1323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 140737572266304) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & 343054102331329) != 0):
                self.state = 1306
                self.oC_Expression()
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1307
                    self.match(CypherParser.SP)


                self.state = 1320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1310
                    self.match(CypherParser.T__1)
                    self.state = 1312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1311
                        self.match(CypherParser.SP)


                    self.state = 1314
                    self.oC_Expression()
                    self.state = 1316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1315
                        self.match(CypherParser.SP)


                    self.state = 1322
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1325
            self.match(CypherParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ImplicitProcedureInvocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_ProcedureName(self):
            return self.getTypedRuleContext(CypherParser.OC_ProcedureNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ImplicitProcedureInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ImplicitProcedureInvocation" ):
                listener.enterOC_ImplicitProcedureInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ImplicitProcedureInvocation" ):
                listener.exitOC_ImplicitProcedureInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ImplicitProcedureInvocation" ):
                return visitor.visitOC_ImplicitProcedureInvocation(self)
            else:
                return visitor.visitChildren(self)




    def oC_ImplicitProcedureInvocation(self):

        localctx = CypherParser.OC_ImplicitProcedureInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_oC_ImplicitProcedureInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.oC_ProcedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureResultFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureResultField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureResultField" ):
                listener.enterOC_ProcedureResultField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureResultField" ):
                listener.exitOC_ProcedureResultField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProcedureResultField" ):
                return visitor.visitOC_ProcedureResultField(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProcedureResultField(self):

        localctx = CypherParser.OC_ProcedureResultFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_oC_ProcedureResultField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ProcedureNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Namespace(self):
            return self.getTypedRuleContext(CypherParser.OC_NamespaceContext,0)


        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ProcedureName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ProcedureName" ):
                listener.enterOC_ProcedureName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ProcedureName" ):
                listener.exitOC_ProcedureName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ProcedureName" ):
                return visitor.visitOC_ProcedureName(self)
            else:
                return visitor.visitChildren(self)




    def oC_ProcedureName(self):

        localctx = CypherParser.OC_ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_oC_ProcedureName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.oC_Namespace()
            self.state = 1332
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_SymbolicNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Namespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Namespace" ):
                listener.enterOC_Namespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Namespace" ):
                listener.exitOC_Namespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Namespace" ):
                return visitor.visitOC_Namespace(self)
            else:
                return visitor.visitChildren(self)




    def oC_Namespace(self):

        localctx = CypherParser.OC_NamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_oC_Namespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1334
                    self.oC_SymbolicName()
                    self.state = 1335
                    self.match(CypherParser.T__22) 
                self.state = 1341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_FilterExpression(self):
            return self.getTypedRuleContext(CypherParser.OC_FilterExpressionContext,0)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Expression(self):
            return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_ListComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ListComprehension" ):
                listener.enterOC_ListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ListComprehension" ):
                listener.exitOC_ListComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ListComprehension" ):
                return visitor.visitOC_ListComprehension(self)
            else:
                return visitor.visitChildren(self)




    def oC_ListComprehension(self):

        localctx = CypherParser.OC_ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_oC_ListComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1342
            self.match(CypherParser.T__7)
            self.state = 1344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1343
                self.match(CypherParser.SP)


            self.state = 1346
            self.oC_FilterExpression()
            self.state = 1355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
            if la_ == 1:
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1347
                    self.match(CypherParser.SP)


                self.state = 1350
                self.match(CypherParser.T__10)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1351
                    self.match(CypherParser.SP)


                self.state = 1354
                self.oC_Expression()


            self.state = 1358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1357
                self.match(CypherParser.SP)


            self.state = 1360
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PatternComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_RelationshipsPattern(self):
            return self.getTypedRuleContext(CypherParser.OC_RelationshipsPatternContext,0)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_Variable(self):
            return self.getTypedRuleContext(CypherParser.OC_VariableContext,0)


        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PatternComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PatternComprehension" ):
                listener.enterOC_PatternComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PatternComprehension" ):
                listener.exitOC_PatternComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PatternComprehension" ):
                return visitor.visitOC_PatternComprehension(self)
            else:
                return visitor.visitChildren(self)




    def oC_PatternComprehension(self):

        localctx = CypherParser.OC_PatternComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_oC_PatternComprehension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.match(CypherParser.T__7)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1363
                self.match(CypherParser.SP)


            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059723791) != 0):
                self.state = 1366
                self.oC_Variable()
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1367
                    self.match(CypherParser.SP)


                self.state = 1370
                self.match(CypherParser.T__2)
                self.state = 1372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1371
                    self.match(CypherParser.SP)




            self.state = 1376
            self.oC_RelationshipsPattern()
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1377
                self.match(CypherParser.SP)


            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==72:
                self.state = 1380
                self.match(CypherParser.WHERE)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1381
                    self.match(CypherParser.SP)


                self.state = 1384
                self.oC_Expression()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1385
                    self.match(CypherParser.SP)




            self.state = 1390
            self.match(CypherParser.T__10)
            self.state = 1392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1391
                self.match(CypherParser.SP)


            self.state = 1394
            self.oC_Expression()
            self.state = 1396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1395
                self.match(CypherParser.SP)


            self.state = 1398
            self.match(CypherParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyLookupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_PropertyKeyName(self):
            return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,0)


        def SP(self):
            return self.getToken(CypherParser.SP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyLookup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyLookup" ):
                listener.enterOC_PropertyLookup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyLookup" ):
                listener.exitOC_PropertyLookup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyLookup" ):
                return visitor.visitOC_PropertyLookup(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyLookup(self):

        localctx = CypherParser.OC_PropertyLookupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_oC_PropertyLookup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(CypherParser.T__22)
            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1401
                self.match(CypherParser.SP)


            self.state = 1404
            self.oC_PropertyKeyName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def oC_CaseAlternatives(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_CaseAlternativesContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_CaseAlternativesContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseExpression" ):
                listener.enterOC_CaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseExpression" ):
                listener.exitOC_CaseExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_CaseExpression" ):
                return visitor.visitOC_CaseExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_CaseExpression(self):

        localctx = CypherParser.OC_CaseExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_oC_CaseExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1406
                self.match(CypherParser.CASE)
                self.state = 1411 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1408
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1407
                            self.match(CypherParser.SP)


                        self.state = 1410
                        self.oC_CaseAlternatives()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1413 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,256,self._ctx)

                pass

            elif la_ == 2:
                self.state = 1415
                self.match(CypherParser.CASE)
                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1416
                    self.match(CypherParser.SP)


                self.state = 1419
                self.oC_Expression()
                self.state = 1424 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1421
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==125:
                            self.state = 1420
                            self.match(CypherParser.SP)


                        self.state = 1423
                        self.oC_CaseAlternatives()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1426 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

                pass


            self.state = 1438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,263,self._ctx)
            if la_ == 1:
                self.state = 1431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1430
                    self.match(CypherParser.SP)


                self.state = 1433
                self.match(CypherParser.ELSE)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1434
                    self.match(CypherParser.SP)


                self.state = 1437
                self.oC_Expression()


            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1440
                self.match(CypherParser.SP)


            self.state = 1443
            self.match(CypherParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_CaseAlternativesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_CaseAlternatives

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_CaseAlternatives" ):
                listener.enterOC_CaseAlternatives(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_CaseAlternatives" ):
                listener.exitOC_CaseAlternatives(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_CaseAlternatives" ):
                return visitor.visitOC_CaseAlternatives(self)
            else:
                return visitor.visitChildren(self)




    def oC_CaseAlternatives(self):

        localctx = CypherParser.OC_CaseAlternativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_oC_CaseAlternatives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(CypherParser.WHEN)
            self.state = 1447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1446
                self.match(CypherParser.SP)


            self.state = 1449
            self.oC_Expression()
            self.state = 1451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1450
                self.match(CypherParser.SP)


            self.state = 1453
            self.match(CypherParser.THEN)
            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1454
                self.match(CypherParser.SP)


            self.state = 1457
            self.oC_Expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Variable" ):
                listener.enterOC_Variable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Variable" ):
                listener.exitOC_Variable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Variable" ):
                return visitor.visitOC_Variable(self)
            else:
                return visitor.visitChildren(self)




    def oC_Variable(self):

        localctx = CypherParser.OC_VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_oC_Variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1459
            self.oC_SymbolicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_NumberLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_DoubleLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_DoubleLiteralContext,0)


        def oC_IntegerLiteral(self):
            return self.getTypedRuleContext(CypherParser.OC_IntegerLiteralContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_NumberLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_NumberLiteral" ):
                listener.enterOC_NumberLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_NumberLiteral" ):
                listener.exitOC_NumberLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_NumberLiteral" ):
                return visitor.visitOC_NumberLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_NumberLiteral(self):

        localctx = CypherParser.OC_NumberLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_oC_NumberLiteral)
        try:
            self.state = 1463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [107, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1461
                self.oC_DoubleLiteral()
                pass
            elif token in [97, 98, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1462
                self.oC_IntegerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_MapLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def oC_PropertyKeyName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyKeyNameContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyKeyNameContext,i)


        def oC_Expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_ExpressionContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_ExpressionContext,i)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_MapLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_MapLiteral" ):
                listener.enterOC_MapLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_MapLiteral" ):
                listener.exitOC_MapLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_MapLiteral" ):
                return visitor.visitOC_MapLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_MapLiteral(self):

        localctx = CypherParser.OC_MapLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_oC_MapLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self.match(CypherParser.T__23)
            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==125:
                self.state = 1466
                self.match(CypherParser.SP)


            self.state = 1502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -1729452625654448128) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 1441116767253430271) != 0):
                self.state = 1469
                self.oC_PropertyKeyName()
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1470
                    self.match(CypherParser.SP)


                self.state = 1473
                self.match(CypherParser.T__9)
                self.state = 1475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1474
                    self.match(CypherParser.SP)


                self.state = 1477
                self.oC_Expression()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 1478
                    self.match(CypherParser.SP)


                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==2:
                    self.state = 1481
                    self.match(CypherParser.T__1)
                    self.state = 1483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1482
                        self.match(CypherParser.SP)


                    self.state = 1485
                    self.oC_PropertyKeyName()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1486
                        self.match(CypherParser.SP)


                    self.state = 1489
                    self.match(CypherParser.T__9)
                    self.state = 1491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1490
                        self.match(CypherParser.SP)


                    self.state = 1493
                    self.oC_Expression()
                    self.state = 1495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1494
                        self.match(CypherParser.SP)


                    self.state = 1501
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1504
            self.match(CypherParser.T__24)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_Parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Parameter" ):
                listener.enterOC_Parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Parameter" ):
                listener.exitOC_Parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Parameter" ):
                return visitor.visitOC_Parameter(self)
            else:
                return visitor.visitChildren(self)




    def oC_Parameter(self):

        localctx = CypherParser.OC_ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_oC_Parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1506
            self.match(CypherParser.T__25)
            self.state = 1509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 84, 85, 86, 100, 119, 120, 121, 124]:
                self.state = 1507
                self.oC_SymbolicName()
                pass
            elif token in [98]:
                self.state = 1508
                self.match(CypherParser.DecimalInteger)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_Atom(self):
            return self.getTypedRuleContext(CypherParser.OC_AtomContext,0)


        def oC_PropertyLookup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CypherParser.OC_PropertyLookupContext)
            else:
                return self.getTypedRuleContext(CypherParser.OC_PropertyLookupContext,i)


        def SP(self, i:int=None):
            if i is None:
                return self.getTokens(CypherParser.SP)
            else:
                return self.getToken(CypherParser.SP, i)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyExpression" ):
                listener.enterOC_PropertyExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyExpression" ):
                listener.exitOC_PropertyExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyExpression" ):
                return visitor.visitOC_PropertyExpression(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyExpression(self):

        localctx = CypherParser.OC_PropertyExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_oC_PropertyExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            self.oC_Atom()
            self.state = 1516 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 1512
                        self.match(CypherParser.SP)


                    self.state = 1515
                    self.oC_PropertyLookup()

                else:
                    raise NoViableAltException(self)
                self.state = 1518 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_PropertyKeyNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SchemaName(self):
            return self.getTypedRuleContext(CypherParser.OC_SchemaNameContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_PropertyKeyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_PropertyKeyName" ):
                listener.enterOC_PropertyKeyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_PropertyKeyName" ):
                listener.exitOC_PropertyKeyName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_PropertyKeyName" ):
                return visitor.visitOC_PropertyKeyName(self)
            else:
                return visitor.visitChildren(self)




    def oC_PropertyKeyName(self):

        localctx = CypherParser.OC_PropertyKeyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_oC_PropertyKeyName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1520
            self.oC_SchemaName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_IntegerLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HexInteger(self):
            return self.getToken(CypherParser.HexInteger, 0)

        def OctalInteger(self):
            return self.getToken(CypherParser.OctalInteger, 0)

        def DecimalInteger(self):
            return self.getToken(CypherParser.DecimalInteger, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_IntegerLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_IntegerLiteral" ):
                listener.enterOC_IntegerLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_IntegerLiteral" ):
                listener.exitOC_IntegerLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_IntegerLiteral" ):
                return visitor.visitOC_IntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_IntegerLiteral(self):

        localctx = CypherParser.OC_IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_oC_IntegerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            _la = self._input.LA(1)
            if not(((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DoubleLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExponentDecimalReal(self):
            return self.getToken(CypherParser.ExponentDecimalReal, 0)

        def RegularDecimalReal(self):
            return self.getToken(CypherParser.RegularDecimalReal, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_DoubleLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_DoubleLiteral" ):
                listener.enterOC_DoubleLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_DoubleLiteral" ):
                listener.exitOC_DoubleLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_DoubleLiteral" ):
                return visitor.visitOC_DoubleLiteral(self)
            else:
                return visitor.visitChildren(self)




    def oC_DoubleLiteral(self):

        localctx = CypherParser.OC_DoubleLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_oC_DoubleLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            _la = self._input.LA(1)
            if not(_la==107 or _la==108):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SchemaNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oC_SymbolicName(self):
            return self.getTypedRuleContext(CypherParser.OC_SymbolicNameContext,0)


        def oC_ReservedWord(self):
            return self.getTypedRuleContext(CypherParser.OC_ReservedWordContext,0)


        def getRuleIndex(self):
            return CypherParser.RULE_oC_SchemaName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SchemaName" ):
                listener.enterOC_SchemaName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SchemaName" ):
                listener.exitOC_SchemaName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SchemaName" ):
                return visitor.visitOC_SchemaName(self)
            else:
                return visitor.visitChildren(self)




    def oC_SchemaName(self):

        localctx = CypherParser.OC_SchemaNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_oC_SchemaName)
        try:
            self.state = 1528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [83, 84, 85, 86, 100, 119, 120, 121, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1526
                self.oC_SymbolicName()
                pass
            elif token in [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 87, 88, 89, 90, 91, 92, 93, 94, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1527
                self.oC_ReservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_ReservedWordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(CypherParser.ALL, 0)

        def ASC(self):
            return self.getToken(CypherParser.ASC, 0)

        def ASCENDING(self):
            return self.getToken(CypherParser.ASCENDING, 0)

        def BY(self):
            return self.getToken(CypherParser.BY, 0)

        def CREATE(self):
            return self.getToken(CypherParser.CREATE, 0)

        def DELETE(self):
            return self.getToken(CypherParser.DELETE, 0)

        def DESC(self):
            return self.getToken(CypherParser.DESC, 0)

        def DESCENDING(self):
            return self.getToken(CypherParser.DESCENDING, 0)

        def DETACH(self):
            return self.getToken(CypherParser.DETACH, 0)

        def EXISTS(self):
            return self.getToken(CypherParser.EXISTS, 0)

        def LIMIT(self):
            return self.getToken(CypherParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(CypherParser.MATCH, 0)

        def MERGE(self):
            return self.getToken(CypherParser.MERGE, 0)

        def ON(self):
            return self.getToken(CypherParser.ON, 0)

        def OPTIONAL(self):
            return self.getToken(CypherParser.OPTIONAL, 0)

        def ORDER(self):
            return self.getToken(CypherParser.ORDER, 0)

        def REMOVE(self):
            return self.getToken(CypherParser.REMOVE, 0)

        def RETURN(self):
            return self.getToken(CypherParser.RETURN, 0)

        def SET(self):
            return self.getToken(CypherParser.SET, 0)

        def L_SKIP(self):
            return self.getToken(CypherParser.L_SKIP, 0)

        def WHERE(self):
            return self.getToken(CypherParser.WHERE, 0)

        def WITH(self):
            return self.getToken(CypherParser.WITH, 0)

        def UNION(self):
            return self.getToken(CypherParser.UNION, 0)

        def UNWIND(self):
            return self.getToken(CypherParser.UNWIND, 0)

        def AND(self):
            return self.getToken(CypherParser.AND, 0)

        def AS(self):
            return self.getToken(CypherParser.AS, 0)

        def CONTAINS(self):
            return self.getToken(CypherParser.CONTAINS, 0)

        def DISTINCT(self):
            return self.getToken(CypherParser.DISTINCT, 0)

        def ENDS(self):
            return self.getToken(CypherParser.ENDS, 0)

        def IN(self):
            return self.getToken(CypherParser.IN, 0)

        def IS(self):
            return self.getToken(CypherParser.IS, 0)

        def NOT(self):
            return self.getToken(CypherParser.NOT, 0)

        def OR(self):
            return self.getToken(CypherParser.OR, 0)

        def STARTS(self):
            return self.getToken(CypherParser.STARTS, 0)

        def XOR(self):
            return self.getToken(CypherParser.XOR, 0)

        def FALSE(self):
            return self.getToken(CypherParser.FALSE, 0)

        def TRUE(self):
            return self.getToken(CypherParser.TRUE, 0)

        def NULL(self):
            return self.getToken(CypherParser.NULL, 0)

        def CONSTRAINT(self):
            return self.getToken(CypherParser.CONSTRAINT, 0)

        def DO(self):
            return self.getToken(CypherParser.DO, 0)

        def FOR(self):
            return self.getToken(CypherParser.FOR, 0)

        def REQUIRE(self):
            return self.getToken(CypherParser.REQUIRE, 0)

        def UNIQUE(self):
            return self.getToken(CypherParser.UNIQUE, 0)

        def CASE(self):
            return self.getToken(CypherParser.CASE, 0)

        def WHEN(self):
            return self.getToken(CypherParser.WHEN, 0)

        def THEN(self):
            return self.getToken(CypherParser.THEN, 0)

        def ELSE(self):
            return self.getToken(CypherParser.ELSE, 0)

        def END(self):
            return self.getToken(CypherParser.END, 0)

        def MANDATORY(self):
            return self.getToken(CypherParser.MANDATORY, 0)

        def SCALAR(self):
            return self.getToken(CypherParser.SCALAR, 0)

        def OF(self):
            return self.getToken(CypherParser.OF, 0)

        def ADD(self):
            return self.getToken(CypherParser.ADD, 0)

        def DROP(self):
            return self.getToken(CypherParser.DROP, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_ReservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_ReservedWord" ):
                listener.enterOC_ReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_ReservedWord" ):
                listener.exitOC_ReservedWord(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_ReservedWord" ):
                return visitor.visitOC_ReservedWord(self)
            else:
                return visitor.visitChildren(self)




    def oC_ReservedWord(self):

        localctx = CypherParser.OC_ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_oC_ReservedWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1530
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -1729452625654448128) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 35993614786494463) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_SymbolicNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnescapedSymbolicName(self):
            return self.getToken(CypherParser.UnescapedSymbolicName, 0)

        def EscapedSymbolicName(self):
            return self.getToken(CypherParser.EscapedSymbolicName, 0)

        def HexLetter(self):
            return self.getToken(CypherParser.HexLetter, 0)

        def COUNT(self):
            return self.getToken(CypherParser.COUNT, 0)

        def FILTER(self):
            return self.getToken(CypherParser.FILTER, 0)

        def EXTRACT(self):
            return self.getToken(CypherParser.EXTRACT, 0)

        def ANY(self):
            return self.getToken(CypherParser.ANY, 0)

        def NONE(self):
            return self.getToken(CypherParser.NONE, 0)

        def SINGLE(self):
            return self.getToken(CypherParser.SINGLE, 0)

        def getRuleIndex(self):
            return CypherParser.RULE_oC_SymbolicName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_SymbolicName" ):
                listener.enterOC_SymbolicName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_SymbolicName" ):
                listener.exitOC_SymbolicName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_SymbolicName" ):
                return visitor.visitOC_SymbolicName(self)
            else:
                return visitor.visitChildren(self)




    def oC_SymbolicName(self):

        localctx = CypherParser.OC_SymbolicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_oC_SymbolicName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            _la = self._input.LA(1)
            if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & 2680059723791) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_LeftArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_LeftArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_LeftArrowHead" ):
                listener.enterOC_LeftArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_LeftArrowHead" ):
                listener.exitOC_LeftArrowHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_LeftArrowHead" ):
                return visitor.visitOC_LeftArrowHead(self)
            else:
                return visitor.visitChildren(self)




    def oC_LeftArrowHead(self):

        localctx = CypherParser.OC_LeftArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_oC_LeftArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1534
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2013790208) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_RightArrowHeadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_RightArrowHead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_RightArrowHead" ):
                listener.enterOC_RightArrowHead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_RightArrowHead" ):
                listener.exitOC_RightArrowHead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_RightArrowHead" ):
                return visitor.visitOC_RightArrowHead(self)
            else:
                return visitor.visitChildren(self)




    def oC_RightArrowHead(self):

        localctx = CypherParser.OC_RightArrowHeadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_oC_RightArrowHead)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1536
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 32213303296) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OC_DashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CypherParser.RULE_oC_Dash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOC_Dash" ):
                listener.enterOC_Dash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOC_Dash" ):
                listener.exitOC_Dash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOC_Dash" ):
                return visitor.visitOC_Dash(self)
            else:
                return visitor.visitChildren(self)




    def oC_Dash(self):

        localctx = CypherParser.OC_DashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_oC_Dash)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 70334384455680) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





