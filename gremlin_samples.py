q = "g.V()"
q = "g.E()"
q = "g.V().hasLabel('person')"
q = "g.V().hasLabel('software')"
q = "g.V().has('person', 'age', 30)"
q = "g.V().has('software', 'lang', 'java')"
q = "g.V().out('knows')"
q = "g.V().in('created')"
q = "g.V().both('knows')"
q = "g.V().repeat(out()).times(2)"
q = "g.V().repeat(in()).times(2)"
q = "g.V().valueMap()"
q = "g.V().properties('name')"
q = "g.V().values('name')"
q = "g.V().out().count()"
q = "g.V().group().by('age')"
q = "g.V().groupCount().by('name')"
q = "g.V().simplePath()"
q = "g.V().hasLabel('person').as('a').out('knows').as('b').select('a','b')"
q = "g.V().order().by('name')"
q = "g.V().order().by('age', decr)"
q = "g.V().limit(5)"
q = "g.V().has('name', within('Alice','Bob'))"
q = "g.E().hasLabel('created')"
q = "g.V().has('name', 'Marko')"
q = "g.V().has('name', 'Marko').both('knows')"
q = "g.V().has('name', 'Marko').both('created')"
q = "g.V().bothE()"
q = "g.V().bothE().has('weight', gt(0.5))"
q = "g.E().mean('weight')"
q = "g.E().sum('weight')"
q = "g.E().min('weight')"
q = "g.E().max('weight')"
q = "g.V().group().by(label).by(count())"
q = "g.V().hasLabel('person').map(values('name'))"
q = "g.V().hasLabel('person').flatMap(out('knows'))"
q = "g.V().has('name', 'Alice').repeat(out()).emit()"
q = "g.V().has('name', 'Alice').repeat(out()).until(has('name', 'Bob'))"
q = "g.V().has('age', gt(30))"
q = "g.V().has('age', lte(25))"
q = "g.V().has('name', startingWith('A'))"
q = "g.V('1').out()"
q = "g.V('1').in()"
q = "g.V('1').both()"
q = "g.V('1').repeat(both()).times(3)"
q = "g.V().has('name', 'Alice').bothE().otherV()"
q = "g.V().has('name', 'Alice').bothE().limit(3)"
q = "g.V().has('age', between(30))"
q = "g.V().has('age', inside(30))"
q = "g.V().has('age', outside(30))"
q = "g.V().has('name', 'Alice').store('x')"
q = "g.withSideEffect('x', []).V().has('name', 'Bob')"
q = "g.V().hasLabel('person').values('name').fold()"
q = "g.V().hasLabel('person').local(out('knows').values('name'))"
q = "g.V().has('name', 'Alice').where(out().hasLabel('person'))"
q = "g.V().has('name', 'Alice').where(inE('knows'))"
q = "g.V().has('name', 'Alice').emit().repeat(out())"
q = "g.V().has('name', 'Alice').repeat(both()).until(has('name','Bob'))"
q = "g.V().has('name', 'Alice').store('a').both().store('a')"
q = "g.V().has('name', 'Alice').group().by(label).by('name')"
q = "g.V().has('name', 'Alice').select('name')"
q = "g.V().has('name', 'Alice').path()"
q = "g.V().hasLabel('person').dedup()"
q = "g.V().hasLabel('person').dedup().by('name')"
q = "g.V().hasLabel('person').aggregate('a')"
q = "g.V().hasLabel('person').groupCount().by('age')"
q = "g.V().hasLabel('software').out('created')"
q = "g.V().has('name', 'Alice').coalesce(out('knows'), out('created'))"
q = "g.V().hasLabel('person').coin(0.5).count()"
q = "g.E().bothV().dedup()"
q = "g.V().has('name', 'Alice').repeat(out()).emit(has('name', 'Bob')).path()"
q = "g.V().has('name', 'Alice').repeat(out()).until(has('name','Bob')).path()"
q = "g.V().has('person', 'name', 'Alice').union(identity(), out('knows'))"
q = "g.V().has('person', 'name', 'Alice').union(out('knows'), out('created'))"
q = "g.V().both().filter(has('age', gt(30)))"
q = "g.V().has('name', 'Alice').sideEffect{println it}"
q = "g.V().sideEffect{it.get().value('age')}"
q = "g.V().choose(has('age', gt(30)), out(), in())"
q = "g.V().choose(constant(true), out(), in())"
q = "g.V().has('name', 'Alice').limit(1)"
q = "g.V().repeat(out()).times(3).valueMap()"
q = "g.V().repeat(in()).times(3).valueMap()"
q = "g.V().both('knows').dedup().count()"
q = "g.V().has('name', 'Bob').bothE().filter(values('weight').is(gt(0.4)))"
q = "g.E().filter(has('weight', lt(0.3)))"
q = "g.V().has('name', 'Alice').out('created').has('lang', 'java')"
q = "g.V().has('name', 'Bob').in('likes')"
q = "g.V().both('collaborates')"
q = "g.V().outE('knows').inV().has('age', gt(25))"
q = "g.V().has('city', 'London')"
q = "g.V().has('city', 'New York')"
q = "g.V().has('salary', gt(50000))"
q = "g.V().has('salary', between(80000))"
q = "g.E().has('since', gte(2010))"
q = "g.V().has('department', 'sales')"
q = "g.V().out('manages').has('role', 'manager')"
q = "g.V().in('reportsTo').has('role', 'employee')"
q = "g.V().has('name', 'Charlie').in('knows')"
q = "g.V().has('status', 'active')"
q = "g.V().has('status', 'inactive')"
q = "g.V().has('type', 'premium')"
q = "g.V().has('type', 'basic')"
q = "g.V().has('name', 'Dennis').repeat(both()).times(4)"
q = "g.V().has('name', 'Emily').repeat(out('friend')).times(2)"
q = "g.V().has('price', gt(100)).values('price')"
q = "g.V().has('price', lte(100)).values('price')"
q = "g.V().has('rating', gt(4.5))"
q = "g.V().has('rating', between(3.5.0))"
q = "g.E().has('transaction', 'complete')"
q = "g.V().has('category', 'books')"
q = "g.V().has('category', 'electronics')"
q = "g.V().has('name', 'Fiona').in('bought')"
q = "g.V().has('name', 'George').out('sold')"
q = "g.V().repeat(out('friend')).times(5).path()"
q = "g.V().repeat(in('friend')).times(5).path()"
q = "g.V().has('region', 'APAC')"
q = "g.V().has('region', 'EMEA')"
q = "g.V().has('region', 'NA')"
q = "g.V().has('visited', within('Paris','London'))"
q = "g.V().has('visited', without('Tokyo'))"
q = "g.V().out('follows').has('name', 'Helen')"
q = "g.V().in('follows').has('name', 'Ian')"
q = "g.V().both('follows').has('name', 'John')"
q = "g.V().out('likes').dedup()"
q = "g.V().in('likes').dedup()"
q = "g.V().has('dob', lte('2000-01-01'))"
q = "g.V().has('dob', gt('1990-01-01'))"
q = "g.V().has('score', lt(50))"
q = "g.V().has('score', gte(90))"
q = "g.V().has('language', 'English')"
q = "g.V().has('language', 'Japanese')"
q = "g.V().repeat(out('recommend')).times(3)"
q = "g.V().repeat(in('recommend')).times(3)"
q = "g.V().has('name', 'Karen').both('worksWith')"
q = "g.V().has('name', 'Leo').both('collaborates')"
q = "g.V().has('name', 'Monica').both('reportsTo')"
q = "g.V().has('status', 'pending')"
q = "g.V().has('status', 'approved')"
q = "g.V().has('status', 'rejected')"
q = "g.V().has('name', 'Nathan').out('subordinate')"
q = "g.V().has('name', 'Olivia').in('subordinate')"
q = "g.V().has('department', 'HR').group().by('role')"
q = "g.V().has('department', 'Engineering').group().by('skill')"
q = "g.V().has('name', 'Paul').out('collaborates').dedup()"
q = "g.V().has('experience', gt(5))"
q = "g.V().has('experience', lt(2))"
q = "g.V().has('level', 'senior')"
q = "g.V().has('level', 'junior')"
q = "g.V().has('name', 'Quinn').out('mentor')"
q = "g.V().has('name', 'Rachel').in('mentor')"
q = "g.V().has('employeeId', eq(1001))"
q = "g.V().has('employeeId', eq(1002))"
q = "g.V().has('joinDate', between('2020-01-01','2021-01-01'))"
q = "g.V().has('joinDate', gte('2022-01-01'))"
q = "g.V().has('title', 'CEO')"
q = "g.V().has('title', 'CTO')"
q = "g.V().has('project', 'Apollo')"
q = "g.V().has('project', 'Zeus')"
q = "g.V().has('name', 'Steve').repeat(out('colleague')).times(3)"
q = "g.V().has('name', 'Tina').repeat(in('colleague')).times(3)"
q = "g.V().out('friend').in('friend')"
q = "g.V().out('friend').out('friend')"
q = "g.V().both('friend').values('name').dedup()"
q = "g.V().has('group', 'admin')"
q = "g.V().has('group', 'user')"
q = "g.V().has('session', 'active')"
q = "g.V().has('session', 'expired')"
q = "g.V().has('key', 'value')"
q = "g.V().has('label', 'custom').limit(10)"
q = "g.V().bothE('connects').otherV().dedup()"
q = "g.V().has('name', 'Uma').both('connects')"
q = "g.E().has('distance', lte(100))"
q = "g.E().has('distance', gt(100))"
q = "g.V().has('name', 'Victor').repeat(out('friend')).times(2)"
q = "g.V().has('name', 'Wendy').repeat(in('friend')).times(2)"
q = "g.V().has('role', 'admin').out('manages')"
q = "g.V().has('role', 'employee').in('manages')"
q = "g.V().hasLabel('order')"
q = "g.V().hasLabel('order').out('contains')"
q = "g.V().has('product', 'Laptop')"
q = "g.V().has('product', 'Smartphone')"
q = "g.V().has('brand', 'Dell')"
q = "g.V().has('brand', 'Apple')"
q = "g.V().has('year', gte(2020))"
q = "g.V().has('year', lt(2020))"
q = "g.V().order().by('price')"
q = "g.V().order().by('price', decr)"
q = "g.V().has('name', 'Zack')"
q = "g.V().has('status', 'ordered')"
q = "g.V().has('status', 'shipped')"
q = "g.V().has('status', 'delivered')"
q = "g.V().has('priority', 'high')"
q = "g.V().has('priority', 'low')"
q = "g.V().has('destination', 'Paris')"
q = "g.V().has('destination', 'Berlin')"
q = "g.V().out('purchased').has('category', 'clothing')"
q = "g.V().has('name','Alice').repeat(out('colleague')).times(4)"
q = "g.V().has('name','Bob').repeat(in('colleague')).times(4)"
q = "g.V().hasLabel('device').values('ip')"
q = "g.V().hasLabel('device').out('connectedTo')"
q = "g.E().hasLabel('transaction').count()"
q = "g.V().hasLabel('transaction').in('initiatedBy')"
q = "g.V().repeat(out()).times(1).count()"
q = "g.V().repeat(in()).until(has('name', 'Circular')).path()"
q = "g.V().group().by('country').by(count())"
q = "g.V().dedup().has('email')"
q = "g.V().has('username', 'john_doe')"
q = "g.V().has('username', 'jane_doe')"
q = "g.V().both('follows').dedup()"
q = "g.V().has('subject', 'math').out('teaches')"
q = "g.V().has('subject', 'science').in('learns')"
q = "g.V().has('course', 'CS101')"
q = "g.V().has('course', 'ENG202')"
q = "g.V().in('enrolled').hasLabel('student')"
q = "g.V().out('enrolled').hasLabel('student')"
q = "g.V().has('version', '1.0').out('updated')"
q = "g.V().has('version', '2.0').in('updated')"
q = "g.V().has('file', 'document.txt')"
q = "g.V().has('file', 'image.png')"
q = "g.V().repeat(outE('linkedTo').inV()).times(2)"
q = "g.V().repeat(inE('linkedTo').outV()).times(2)"
q = "g.E().has('relationship', 'parent')"
q = "g.V().has('category', 'news')"
q = "g.V().has('category', 'blog')"
q = "g.V().has('active', true)"
q = "g.V().has('active', false)"
q = "g.V().has('updatedAt', gt('2022-01-01'))"
q = "g.V().has('visited', eq(10))"
q = "g.V().has('visited', lt(5))"
q = "g.V().has('count', gte(100))"
q = "g.V().has('count', lte(50))"
q = "g.V().has('reputation', gt(1000))"
q = "g.V().has('reputation', lt(100))"
q = "g.V().bothE('mentions').otherV().groupCount()"
q = "g.V().bothE('tags').otherV().dedup()"
q = "g.V().has('role', 'moderator')"
q = "g.V().has('role', 'contributor')"
q = "g.V().has('license', 'MIT')"
q = "g.V().has('license', 'GPL')"
q = "g.V().filter(has('score', within(80,90)))"
q = "g.V().filter(has('score', outside(40,60)))"
q = "g.V().repeat(out('refersTo')).times(3).dedup()"
q = "g.V().repeat(in('refersTo')).times(3).dedup()"
q = "g.V().has('name', 'Oscar').both('colleague').dedup()"
q = "g.V().has('name', 'Pam').both('colleague').dedup()"
q = "g.V().has('tag', 'urgent')"
q = "g.V().has('tag', 'routine')"
q = "g.E().has('action', 'login')"
q = "g.E().has('action', 'logout')"
q = "g.V().has('device', 'mobile')"
q = "g.V().has('device', 'desktop')"
q = "g.V().has('os', 'Windows')"
q = "g.V().has('os', 'Linux')"
q = "g.V().has('os', 'macOS')"
q = "g.V().match(__.as('a').out('friend').as('b'), __.as('b').has('age', gt(30)))"
q = "g.V().match(__.as('a').in('reportsTo').as('b'))"
q = "g.V().match(__.as('a').both('risks').as('b'))"
q = "g.V().has('name', 'Quincy').project('name', 'city')"
q = "g.V().has('name', 'Rita').project('name', 'role')"
q = "g.V().has('interest', 'music')"
q = "g.V().has('interest', 'sports')"
q = "g.V().hasMap({'fname'"
q = "g.V().has('bio', containing('engineer'))"
q = "g.V().has('notes', not(within('obsolete')))"
q = "g.V().has('age', eq(18))"
q = "g.V().has('age', eq(21))"
q = "g.V().has('height', gt(170))"
q = "g.V().has('height', lt(150))"
q = "g.V().bothE('affiliatedWith').otherV().has('institution', 'MIT')"
q = "g.V().bothE('affiliatedWith').otherV().has('institution', 'Stanford')"
q = "g.V().repeat(out('recommends')).times(2)"
q = "g.V().repeat(in('recommends')).times(2)"
q = "g.V().has('name', 'Tom').where(out('follows'))"
q = "g.V().has('name', 'Ursula').where(in('follows'))"
q = "g.V().has('alias', 'Vicky')"
q = "g.V().has('alias', 'Walter')"
q = "g.V().has('username', startingWith('admin'))"
q = "g.V().has('username', startingWith('mod'))"
q = "g.V().dedup().has('phone')"
q = "g.V().limit(20).dedup()"
q = "g.V().has('score', between(80))"
q = "g.V().has('score', not(between(50)))"
q = "g.V().hasLabel('article').out('similarTo')"
q = "g.V().hasLabel('article').in('similarTo')"
q = "g.V().has('name','Xavier').both('related')"
q = "g.V().has('name','Yvonne').both('related')"
q = "g.V().bothE('supports').order().by('weight', decr)"
q = "g.V().bothE('against').order().by('weight')"
q = "g.V().has('key','value').limit(5)"
q = "g.V().has('attribute','color').values('color')"
q = "g.V().both('linked').group().by('relationship')"
q = "g.V().has('department','finance')"
q = "g.V().has('department','marketing')"
q = "g.V().has('income', gt(70000))"
q = "g.V().has('income', between(50000,90000))"
q = "g.V().out('paidTo').has('role','vendor')"
q = "g.V().in('paidTo').has('role','client')"
q = "g.V().repeat(out('endorses')).times(2).count()"
q = "g.V().repeat(in('endorses')).times(2).count()"
q = "g.V().has('rating', eq(5)).out('reviews')"
q = "g.V(person_id).toList()"
q = "g.V(person_id)"
q = "g.V(vertex).valueMap().toList()"
q = "g.V(vertex).valueMap()"
q = "g.V(vertex)"
q = "g.addV('person').property(T.id, person_id).next()"
q = "g.addV('person').property(T.id, person_id)"
q = "g.addV('person')"
q = "g.V(person).property(prop_name, prop_value).next()"
q = "g.V(person).property(prop_name, prop_value)"
q = "g.V(person)"
q = "g.V(node).valueMap()"
q = "g.V(node)"
q = "g.V(person).properties().drop().iterate()"
q = "g.V(person).properties().drop()"
q = "g.V(person).properties()"
q = "g.V(from_person).outE('knows').filter(__.inV().is_(to_person)).toList()"
q = "g.V(from_person).outE('knows').filter(__.inV().is_(to_person))"
q = "g.V(from_person).outE('knows')"
q = "g.V(from_person)"
q = "g.V(from_person).outE('knows').filter(__.inV().is_(to_person)).property('weight', weight).next()"
q = "g.V(from_person).outE('knows').filter(__.inV().is_(to_person)).property('weight', weight)"
q = "g.V(from_person).addE('knows').to(to_person).property('weight', weight).next()"
q = "g.V(from_person).addE('knows').to(to_person).property('weight', weight)"
q = "g.V(from_person).addE('knows').to(to_person)"
q = "g.V(from_person).addE('knows')"
q = "g.V().drop().iterate()"
q = "g.V().drop()"
